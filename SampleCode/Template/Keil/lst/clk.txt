; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\clk.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\clk.d --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 -I..\..\..\Library\CMSIS\Include -I..\..\..\Library\Device\Nuvoton\NUC029xEE\Include -I..\..\..\Library\StdDriver\inc -I..\..\Template -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=528 --omf_browse=.\obj\clk.crf ..\..\..\Library\StdDriver\src\clk.c]
                          THUMB

                          AREA ||i.CLK_DisableCKO||, CODE, READONLY, ALIGN=2

                  CLK_DisableCKO PROC
;;;29       */
;;;30     void CLK_DisableCKO(void)
000000  b500              PUSH     {lr}
;;;31     {
;;;32         /* Disable CKO clock source */
;;;33         CLK_DisableModuleClock(FDIV_MODULE);
000002  4802              LDR      r0,|L1.12|
000004  f7fffffe          BL       CLK_DisableModuleClock
;;;34     }
000008  bd00              POP      {pc}
;;;35     
                          ENDP

00000a  0000              DCW      0x0000
                  |L1.12|
                          DCD      0x66200006

                          AREA ||i.CLK_DisableModuleClock||, CODE, READONLY, ALIGN=2

                  CLK_DisableModuleClock PROC
;;;505      */
;;;506    void CLK_DisableModuleClock(uint32_t u32ModuleIdx)
000000  b51f              PUSH     {r0-r4,lr}
;;;507    {
;;;508        uint32_t u32OffsetTbl[4] = {0x0, 0x4, 0x2C, 0x0};
000002  4909              LDR      r1,|L2.40|
000004  c91e              LDM      r1,{r1-r4}
;;;509    
;;;510        *(volatile uint32_t *)((uint32_t)&CLK->AHBCLK + u32OffsetTbl[MODULE_APBCLK(u32ModuleIdx)])  &= ~(1 << MODULE_IP_EN_Pos(u32ModuleIdx));
000006  9403              STR      r4,[sp,#0xc]
000008  466c              MOV      r4,sp
00000a  c40e              STM      r4!,{r1-r3}
00000c  0f81              LSRS     r1,r0,#30
00000e  008a              LSLS     r2,r1,#2
000010  4669              MOV      r1,sp
000012  588a              LDR      r2,[r1,r2]
000014  4905              LDR      r1,|L2.44|
000016  1851              ADDS     r1,r2,r1
000018  684a              LDR      r2,[r1,#4]
00001a  06c3              LSLS     r3,r0,#27
00001c  0edb              LSRS     r3,r3,#27
00001e  2001              MOVS     r0,#1
000020  4098              LSLS     r0,r0,r3
000022  4382              BICS     r2,r2,r0
000024  604a              STR      r2,[r1,#4]
;;;511    }
000026  bd1f              POP      {r0-r4,pc}
;;;512    
                          ENDP

                  |L2.40|
                          DCD      ||.constdata||+0x28
                  |L2.44|
                          DCD      0x50000200

                          AREA ||i.CLK_DisablePLL||, CODE, READONLY, ALIGN=2

                  CLK_DisablePLL PROC
;;;644      */
;;;645    void CLK_DisablePLL(void)
000000  4802              LDR      r0,|L3.12|
;;;646    {
;;;647        CLK->PLLCON |= CLK_PLLCON_PD_Msk;
000002  6a01              LDR      r1,[r0,#0x20]
000004  01c2              LSLS     r2,r0,#7
000006  4311              ORRS     r1,r1,r2
000008  6201              STR      r1,[r0,#0x20]
;;;648    }
00000a  4770              BX       lr
;;;649    
                          ENDP

                  |L3.12|
                          DCD      0x50000200

                          AREA ||i.CLK_DisableSysTick||, CODE, READONLY, ALIGN=2

                  CLK_DisableSysTick PROC
;;;717      */
;;;718    void CLK_DisableSysTick(void) 
000000  4901              LDR      r1,|L4.8|
;;;719    {    
;;;720        /* Set System Tick counter disabled */
;;;721    	SysTick->CTRL = 0;    
000002  2000              MOVS     r0,#0
000004  6108              STR      r0,[r1,#0x10]
;;;722    }
000006  4770              BX       lr
;;;723    
                          ENDP

                  |L4.8|
                          DCD      0xe000e000

                          AREA ||i.CLK_DisableXtalRC||, CODE, READONLY, ALIGN=2

                  CLK_DisableXtalRC PROC
;;;435      */
;;;436    void CLK_DisableXtalRC(uint32_t u32ClkMask)
000000  4902              LDR      r1,|L5.12|
;;;437    {
;;;438        CLK->PWRCON &= ~u32ClkMask;
000002  680a              LDR      r2,[r1,#0]
000004  4382              BICS     r2,r2,r0
000006  600a              STR      r2,[r1,#0]
;;;439    }
000008  4770              BX       lr
;;;440    
                          ENDP

00000a  0000              DCW      0x0000
                  |L5.12|
                          DCD      0x50000200

                          AREA ||i.CLK_EnableCKO||, CODE, READONLY, ALIGN=2

                  CLK_EnableCKO PROC
;;;53       */
;;;54     void CLK_EnableCKO(uint32_t u32ClkSrc, uint32_t u32ClkDiv, uint32_t u32ClkDivBy1En)
000000  0153              LSLS     r3,r2,#5
;;;55     {
;;;56         /* CKO = clock source / 2^(u32ClkDiv + 1) */
;;;57         CLK->FRQDIV = CLK_FRQDIV_DIVIDER_EN_Msk | u32ClkDiv | (u32ClkDivBy1En << CLK_FRQDIV_DIVIDER1_Pos);
000002  430b              ORRS     r3,r3,r1
000004  b500              PUSH     {lr}                  ;55
000006  2110              MOVS     r1,#0x10
000008  4a08              LDR      r2,|L6.44|
00000a  430b              ORRS     r3,r3,r1
00000c  6253              STR      r3,[r2,#0x24]
;;;58     
;;;59         /* Enable CKO clock source */
;;;60         CLK->APBCLK |= CLK_APBCLK_FDIV_EN_Msk;
00000e  6891              LDR      r1,[r2,#8]
000010  2340              MOVS     r3,#0x40
000012  4319              ORRS     r1,r1,r3
000014  6091              STR      r1,[r2,#8]
;;;61     
;;;62         /* Select CKO clock source */
;;;63         CLK->CLKSEL2 = (CLK->CLKSEL2 & (~CLK_CLKSEL2_FRQDIV_S_Msk)) | (u32ClkSrc);
000016  69d1              LDR      r1,[r2,#0x1c]
000018  230c              MOVS     r3,#0xc
00001a  4399              BICS     r1,r1,r3
00001c  4301              ORRS     r1,r1,r0
00001e  61d1              STR      r1,[r2,#0x1c]
;;;64         CLK_SetModuleClock(FDIV_MODULE, u32ClkSrc, 0);
000020  4601              MOV      r1,r0
000022  2200              MOVS     r2,#0
000024  4802              LDR      r0,|L6.48|
000026  f7fffffe          BL       CLK_SetModuleClock
;;;65     }
00002a  bd00              POP      {pc}
;;;66     
                          ENDP

                  |L6.44|
                          DCD      0x50000200
                  |L6.48|
                          DCD      0x66200006

                          AREA ||i.CLK_EnableModuleClock||, CODE, READONLY, ALIGN=2

                  CLK_EnableModuleClock PROC
;;;469      */
;;;470    void CLK_EnableModuleClock(uint32_t u32ModuleIdx)
000000  b51f              PUSH     {r0-r4,lr}
;;;471    {
;;;472        uint32_t u32OffsetTbl[4] = {0x0, 0x4, 0x2C, 0x0};
000002  4909              LDR      r1,|L7.40|
000004  c91e              LDM      r1,{r1-r4}
;;;473    
;;;474        *(volatile uint32_t *)((uint32_t)&CLK->AHBCLK + u32OffsetTbl[MODULE_APBCLK(u32ModuleIdx)])  |= 1 << MODULE_IP_EN_Pos(u32ModuleIdx);
000006  9403              STR      r4,[sp,#0xc]
000008  466c              MOV      r4,sp
00000a  c40e              STM      r4!,{r1-r3}
00000c  0f81              LSRS     r1,r0,#30
00000e  008a              LSLS     r2,r1,#2
000010  4669              MOV      r1,sp
000012  588a              LDR      r2,[r1,r2]
000014  4905              LDR      r1,|L7.44|
000016  1851              ADDS     r1,r2,r1
000018  684a              LDR      r2,[r1,#4]
00001a  06c3              LSLS     r3,r0,#27
00001c  0edb              LSRS     r3,r3,#27
00001e  2001              MOVS     r0,#1
000020  4098              LSLS     r0,r0,r3
000022  4302              ORRS     r2,r2,r0
000024  604a              STR      r2,[r1,#4]
;;;475    }
000026  bd1f              POP      {r0-r4,pc}
;;;476    
                          ENDP

                  |L7.40|
                          DCD      ||.constdata||+0x18
                  |L7.44|
                          DCD      0x50000200

                          AREA ||i.CLK_EnablePLL||, CODE, READONLY, ALIGN=2

                  CLK_EnablePLL PROC
;;;523      */
;;;524    uint32_t CLK_EnablePLL(uint32_t u32PllClkSrc, uint32_t u32PllFreq)
000000  b5f0              PUSH     {r4-r7,lr}
;;;525    {
000002  0007              MOVS     r7,r0
000004  460c              MOV      r4,r1
;;;526        uint32_t u32PllSrcClk, u32NR, u32NF, u32NO, u32CLK_SRC;
;;;527        uint32_t u32Tmp, u32Tmp2, u32Tmp3, u32Min, u32MinNF, u32MinNR;
;;;528    
;;;529        /* Disable PLL first to avoid unstable when setting PLL. */
;;;530        CLK->PLLCON = CLK_PLLCON_PD_Msk;
000006  4856              LDR      r0,|L8.352|
000008  b085              SUB      sp,sp,#0x14           ;525
00000a  4954              LDR      r1,|L8.348|
00000c  6201              STR      r1,[r0,#0x20]
;;;531    
;;;532        /* PLL source clock is from HXT */
;;;533        if(u32PllClkSrc == CLK_PLLCON_PLL_SRC_HXT)
;;;534        {
;;;535            /* Enable HXT clock */
;;;536            CLK->PWRCON |= CLK_PWRCON_XTL12M_EN_Msk;
;;;537    
;;;538            /* Wait for HXT clock ready */
;;;539            CLK_WaitClockReady(CLK_CLKSTATUS_XTL12M_STB_Msk);
;;;540    
;;;541            /* Select PLL source clock from HXT */
;;;542            u32CLK_SRC = CLK_PLLCON_PLL_SRC_HXT;
;;;543            u32PllSrcClk = __HXT;
00000e  4e55              LDR      r6,|L8.356|
;;;544    
;;;545            /* u32NR start from 2 */
;;;546            u32NR = 2;
;;;547        }
;;;548    
;;;549        /* PLL source clock is from HIRC */
;;;550        else
;;;551        {
;;;552            /* Enable HIRC clock */
;;;553            CLK->PWRCON |= CLK_PWRCON_OSC22M_EN_Msk;
000010  6801              LDR      r1,[r0,#0]
000012  d013              BEQ      |L8.60|
000014  2204              MOVS     r2,#4
000016  4311              ORRS     r1,r1,r2
000018  6001              STR      r1,[r0,#0]
;;;554    
;;;555            /* Wait for HIRC clock ready */
;;;556            CLK_WaitClockReady(CLK_CLKSTATUS_OSC22M_STB_Msk);
00001a  2010              MOVS     r0,#0x10
00001c  f7fffffe          BL       CLK_WaitClockReady
;;;557    
;;;558            /* Select PLL source clock from HIRC */
;;;559            u32CLK_SRC = CLK_PLLCON_PLL_SRC_HIRC;
000020  2001              MOVS     r0,#1
000022  04c0              LSLS     r0,r0,#19
;;;560            u32PllSrcClk = __HIRC;
000024  9002              STR      r0,[sp,#8]
000026  4850              LDR      r0,|L8.360|
;;;561    
;;;562            /* u32NR start from 4 when FIN = 22.1184MHz to avoid calculation overflow */
;;;563            u32NR = 4;
000028  2504              MOVS     r5,#4
00002a  9003              STR      r0,[sp,#0xc]
                  |L8.44|
;;;564        }
;;;565    
;;;566        /* Select "NO" according to request frequency */
;;;567        if((u32PllFreq <= FREQ_200MHZ) && (u32PllFreq > FREQ_100MHZ))
00002c  484f              LDR      r0,|L8.364|
00002e  4950              LDR      r1,|L8.368|
000030  1820              ADDS     r0,r4,r0
000032  4288              CMP      r0,r1
000034  d80d              BHI      |L8.82|
;;;568        {
;;;569            u32NO = 0;
000036  2000              MOVS     r0,#0
000038  9004              STR      r0,[sp,#0x10]
00003a  e01c              B        |L8.118|
                  |L8.60|
00003c  2201              MOVS     r2,#1                 ;536
00003e  4311              ORRS     r1,r1,r2              ;536
000040  6001              STR      r1,[r0,#0]            ;536
000042  4610              MOV      r0,r2                 ;539
000044  f7fffffe          BL       CLK_WaitClockReady
000048  2000              MOVS     r0,#0                 ;542
00004a  2502              MOVS     r5,#2                 ;546
00004c  9603              STR      r6,[sp,#0xc]          ;546
00004e  9002              STR      r0,[sp,#8]            ;546
000050  e7ec              B        |L8.44|
                  |L8.82|
;;;570        }
;;;571        else if((u32PllFreq <= FREQ_100MHZ) && (u32PllFreq > FREQ_50MHZ))
000052  4848              LDR      r0,|L8.372|
000054  4948              LDR      r1,|L8.376|
000056  1820              ADDS     r0,r4,r0
000058  4288              CMP      r0,r1
00005a  d803              BHI      |L8.100|
;;;572        {
;;;573            u32NO = 1;
00005c  2001              MOVS     r0,#1
;;;574            u32PllFreq = u32PllFreq << 1;
00005e  0064              LSLS     r4,r4,#1
000060  9004              STR      r0,[sp,#0x10]
000062  e008              B        |L8.118|
                  |L8.100|
;;;575        }
;;;576        else if((u32PllFreq <= FREQ_50MHZ) && (u32PllFreq >= FREQ_25MHZ))
000064  4845              LDR      r0,|L8.380|
000066  4945              LDR      r1,|L8.380|
000068  1820              ADDS     r0,r4,r0
00006a  4249              RSBS     r1,r1,#0
00006c  4288              CMP      r0,r1
00006e  d849              BHI      |L8.260|
;;;577        {
;;;578            u32NO = 3;
000070  2003              MOVS     r0,#3
;;;579            u32PllFreq = u32PllFreq << 2;
000072  00a4              LSLS     r4,r4,#2
000074  9004              STR      r0,[sp,#0x10]
                  |L8.118|
;;;580        }
;;;581        else
;;;582        {
;;;583            /* Wrong frequency request. Just return default setting. */
;;;584            goto lexit;
;;;585        }
;;;586    
;;;587        /* Find best solution */
;;;588        u32Min = (uint32_t) - 1;
000076  2600              MOVS     r6,#0
000078  43f6              MVNS     r6,r6
;;;589        u32MinNR = 0;
00007a  2000              MOVS     r0,#0
;;;590        u32MinNF = 0;
00007c  9000              STR      r0,[sp,#0]
;;;591        for(; u32NR <= 33; u32NR++)
00007e  9001              STR      r0,[sp,#4]
000080  e021              B        |L8.198|
                  |L8.130|
;;;592        {
;;;593            u32Tmp = u32PllSrcClk / u32NR;
000082  4629              MOV      r1,r5
000084  9803              LDR      r0,[sp,#0xc]
000086  f7fffffe          BL       __aeabi_uidivmod
;;;594            if((u32Tmp > 1600000) && (u32Tmp < 15000000))
00008a  493d              LDR      r1,|L8.384|
00008c  4a3d              LDR      r2,|L8.388|
00008e  1841              ADDS     r1,r0,r1
000090  4291              CMP      r1,r2
000092  d217              BCS      |L8.196|
;;;595            {
;;;596                for(u32NF = 2; u32NF <= 513; u32NF++)
000094  2202              MOVS     r2,#2
                  |L8.150|
;;;597                {
;;;598                    u32Tmp2 = u32Tmp * u32NF;
;;;599                    if((u32Tmp2 >= 100000000) && (u32Tmp2 <= 200000000))
000096  4b35              LDR      r3,|L8.364|
000098  4601              MOV      r1,r0                 ;596
00009a  4351              MULS     r1,r2,r1              ;598
00009c  1c5b              ADDS     r3,r3,#1
00009e  18cf              ADDS     r7,r1,r3
0000a0  425b              RSBS     r3,r3,#0
0000a2  429f              CMP      r7,r3
0000a4  d80a              BHI      |L8.188|
;;;600                    {
;;;601                        u32Tmp3 = (u32Tmp2 > u32PllFreq) ? u32Tmp2 - u32PllFreq : u32PllFreq - u32Tmp2;
0000a6  42a1              CMP      r1,r4
0000a8  d901              BLS      |L8.174|
0000aa  1b0b              SUBS     r3,r1,r4
0000ac  e000              B        |L8.176|
                  |L8.174|
0000ae  1a63              SUBS     r3,r4,r1
                  |L8.176|
;;;602                        if(u32Tmp3 < u32Min)
0000b0  42b3              CMP      r3,r6
0000b2  d203              BCS      |L8.188|
;;;603                        {
;;;604                            u32Min = u32Tmp3;
0000b4  001e              MOVS     r6,r3
;;;605                            u32MinNR = u32NR;
;;;606                            u32MinNF = u32NF;
;;;607    
;;;608                            /* Break when get good results */
;;;609                            if(u32Min == 0)
0000b6  9500              STR      r5,[sp,#0]
0000b8  9201              STR      r2,[sp,#4]
0000ba  d003              BEQ      |L8.196|
                  |L8.188|
0000bc  4932              LDR      r1,|L8.392|
0000be  1c52              ADDS     r2,r2,#1              ;596
0000c0  428a              CMP      r2,r1                 ;596
0000c2  d9e8              BLS      |L8.150|
                  |L8.196|
0000c4  1c6d              ADDS     r5,r5,#1              ;596
                  |L8.198|
0000c6  2d21              CMP      r5,#0x21              ;591
0000c8  d9db              BLS      |L8.130|
;;;610                                break;
;;;611                        }
;;;612                    }
;;;613                }
;;;614            }
;;;615        }
;;;616    
;;;617        /* Enable and apply new PLL setting. */
;;;618        CLK->PLLCON = u32CLK_SRC | (u32NO << 14) | ((u32MinNR - 2) << 9) | (u32MinNF - 2);
0000ca  9804              LDR      r0,[sp,#0x10]
0000cc  9902              LDR      r1,[sp,#8]
0000ce  0380              LSLS     r0,r0,#14
0000d0  4308              ORRS     r0,r0,r1
0000d2  9900              LDR      r1,[sp,#0]
0000d4  2201              MOVS     r2,#1
0000d6  0249              LSLS     r1,r1,#9
0000d8  0292              LSLS     r2,r2,#10
0000da  1a89              SUBS     r1,r1,r2
0000dc  4308              ORRS     r0,r0,r1
0000de  9901              LDR      r1,[sp,#4]
0000e0  1e89              SUBS     r1,r1,#2
0000e2  4308              ORRS     r0,r0,r1
0000e4  491e              LDR      r1,|L8.352|
0000e6  6208              STR      r0,[r1,#0x20]
;;;619    
;;;620        /* Waiting for PLL clock stable */
;;;621        CLK_WaitClockReady(CLK_CLKSTATUS_PLL_STB_Msk);
0000e8  2004              MOVS     r0,#4
0000ea  f7fffffe          BL       CLK_WaitClockReady
;;;622    
;;;623        /* Return actual PLL output clock frequency */
;;;624        return u32PllSrcClk / ((u32NO + 1) * u32MinNR) * u32MinNF;
0000ee  9904              LDR      r1,[sp,#0x10]
0000f0  9800              LDR      r0,[sp,#0]
0000f2  1c49              ADDS     r1,r1,#1
0000f4  4341              MULS     r1,r0,r1
0000f6  9803              LDR      r0,[sp,#0xc]
0000f8  f7fffffe          BL       __aeabi_uidivmod
0000fc  9901              LDR      r1,[sp,#4]
0000fe  4348              MULS     r0,r1,r0
                  |L8.256|
;;;625    
;;;626    lexit:
;;;627    
;;;628        /* Apply default PLL setting and return */
;;;629        if(u32PllClkSrc == CLK_PLLCON_PLL_SRC_HXT)
;;;630            CLK->PLLCON = 0xC22E; /* 48MHz */
;;;631        else
;;;632            CLK->PLLCON = 0x8D66F; /* 48.06498462MHz */
;;;633    
;;;634        CLK_WaitClockReady(CLK_CLKSTATUS_PLL_STB_Msk);
;;;635        return CLK_GetPLLClockFreq();
;;;636    
;;;637    }
000100  b005              ADD      sp,sp,#0x14
000102  bdf0              POP      {r4-r7,pc}
                  |L8.260|
000104  2f00              CMP      r7,#0                 ;629
000106  d00f              BEQ      |L8.296|
000108  4920              LDR      r1,|L8.396|
                  |L8.266|
00010a  4815              LDR      r0,|L8.352|
00010c  6201              STR      r1,[r0,#0x20]         ;632
00010e  2004              MOVS     r0,#4                 ;634
000110  f7fffffe          BL       CLK_WaitClockReady
000114  a01e              ADR      r0,|L8.400|
000116  6800              LDR      r0,[r0,#0]            ;634
000118  9000              STR      r0,[sp,#0]            ;634
00011a  4811              LDR      r0,|L8.352|
00011c  6a01              LDR      r1,[r0,#0x20]         ;634
00011e  1300              ASRS     r0,r0,#12             ;634
000120  4201              TST      r1,r0                 ;634
000122  d003              BEQ      |L8.300|
000124  2000              MOVS     r0,#0                 ;634
000126  e7eb              B        |L8.256|
                  |L8.296|
000128  491a              LDR      r1,|L8.404|
00012a  e7ee              B        |L8.266|
                  |L8.300|
00012c  0308              LSLS     r0,r1,#12             ;630
00012e  d500              BPL      |L8.306|
000130  4e0d              LDR      r6,|L8.360|
                  |L8.306|
000132  0388              LSLS     r0,r1,#14             ;630
000134  d501              BPL      |L8.314|
000136  4630              MOV      r0,r6                 ;630
000138  e7e2              B        |L8.256|
                  |L8.314|
00013a  0408              LSLS     r0,r1,#16
00013c  0f80              LSRS     r0,r0,#30
00013e  466a              MOV      r2,sp
000140  5c10              LDRB     r0,[r2,r0]
000142  05ca              LSLS     r2,r1,#23
000144  0489              LSLS     r1,r1,#18
000146  0ec9              LSRS     r1,r1,#27
000148  1c89              ADDS     r1,r1,#2
00014a  0dd2              LSRS     r2,r2,#23
00014c  4341              MULS     r1,r0,r1
00014e  08b0              LSRS     r0,r6,#2
000150  1c92              ADDS     r2,r2,#2
000152  4350              MULS     r0,r2,r0
000154  f7fffffe          BL       __aeabi_uidivmod
000158  0080              LSLS     r0,r0,#2
00015a  e7d1              B        |L8.256|
;;;638    
                          ENDP

                  |L8.348|
                          DCD      0x00010000
                  |L8.352|
                          DCD      0x50000200
                  |L8.356|
                          DCD      0x00b71b00
                  |L8.360|
                          DCD      0x01518000
                  |L8.364|
                          DCD      0xfa0a1eff
                  |L8.368|
                          DCD      0x05f5e0ff
                  |L8.372|
                          DCD      0xfd050f7f
                  |L8.376|
                          DCD      0x02faf07f
                  |L8.380|
                          DCD      0xfe8287c0
                  |L8.384|
                          DCD      0xffe795ff
                  |L8.388|
                          DCD      0x00cc77bf
                  |L8.392|
                          DCD      0x00000201
                  |L8.396|
                          DCD      0x0008d66f
                  |L8.400|
000190  01020204          DCB      1,2,2,4
                  |L8.404|
                          DCD      0x0000c22e

                          AREA ||i.CLK_EnableSysTick||, CODE, READONLY, ALIGN=2

                  CLK_EnableSysTick PROC
;;;690      */
;;;691    void CLK_EnableSysTick(uint32_t u32ClkSrc, uint32_t u32Count) 
000000  b570              PUSH     {r4-r6,lr}
;;;692    {
;;;693        /* Set System Tick counter disabled */
;;;694        SysTick->CTRL = 0;    
000002  4a0b              LDR      r2,|L9.48|
000004  2400              MOVS     r4,#0
000006  6114              STR      r4,[r2,#0x10]
;;;695    
;;;696        /* Set System Tick clock source */
;;;697        if( u32ClkSrc == CLK_CLKSEL0_STCLK_S_HCLK )         
000008  2804              CMP      r0,#4
00000a  d00c              BEQ      |L9.38|
;;;698            SysTick->CTRL |= SysTick_CTRL_CLKSOURCE_Msk;
;;;699        else
;;;700            CLK->CLKSEL0 = (CLK->CLKSEL0 & ~CLK_CLKSEL0_STCLK_S_Msk) | u32ClkSrc; 
00000c  4d09              LDR      r5,|L9.52|
00000e  692b              LDR      r3,[r5,#0x10]
000010  2638              MOVS     r6,#0x38
000012  43b3              BICS     r3,r3,r6
000014  4303              ORRS     r3,r3,r0
000016  612b              STR      r3,[r5,#0x10]
                  |L9.24|
;;;701    
;;;702        /* Set System Tick reload value */
;;;703        SysTick->LOAD = u32Count;   
000018  6151              STR      r1,[r2,#0x14]
;;;704        
;;;705        /* Clear System Tick current value and counter flag */
;;;706        SysTick->VAL = 0;           
00001a  6194              STR      r4,[r2,#0x18]
;;;707        
;;;708        /* Set System Tick interrupt enabled and counter enabled */    
;;;709        SysTick->CTRL |= SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk;       
00001c  6910              LDR      r0,[r2,#0x10]
00001e  2103              MOVS     r1,#3
000020  4308              ORRS     r0,r0,r1
000022  6110              STR      r0,[r2,#0x10]
;;;710    }
000024  bd70              POP      {r4-r6,pc}
                  |L9.38|
000026  6910              LDR      r0,[r2,#0x10]         ;698
000028  2304              MOVS     r3,#4                 ;698
00002a  4318              ORRS     r0,r0,r3              ;698
00002c  6110              STR      r0,[r2,#0x10]         ;698
00002e  e7f3              B        |L9.24|
;;;711    
                          ENDP

                  |L9.48|
                          DCD      0xe000e000
                  |L9.52|
                          DCD      0x50000200

                          AREA ||i.CLK_EnableXtalRC||, CODE, READONLY, ALIGN=2

                  CLK_EnableXtalRC PROC
;;;419      */
;;;420    void CLK_EnableXtalRC(uint32_t u32ClkMask)
000000  4902              LDR      r1,|L10.12|
;;;421    {
;;;422        CLK->PWRCON |= u32ClkMask;
000002  680a              LDR      r2,[r1,#0]
000004  4302              ORRS     r2,r2,r0
000006  600a              STR      r2,[r1,#0]
;;;423    }
000008  4770              BX       lr
;;;424    
                          ENDP

00000a  0000              DCW      0x0000
                  |L10.12|
                          DCD      0x50000200

                          AREA ||i.CLK_GetCPUFreq||, CODE, READONLY, ALIGN=2

                  CLK_GetCPUFreq PROC
;;;148      */
;;;149    uint32_t CLK_GetCPUFreq(void)
000000  b510              PUSH     {r4,lr}
;;;150    {
;;;151        SystemCoreClockUpdate();
000002  f7fffffe          BL       SystemCoreClockUpdate
;;;152        return SystemCoreClock;
000006  4801              LDR      r0,|L11.12|
000008  6800              LDR      r0,[r0,#0]  ; SystemCoreClock
;;;153    }
00000a  bd10              POP      {r4,pc}
;;;154    
                          ENDP

                  |L11.12|
                          DCD      SystemCoreClock

                          AREA ||i.CLK_GetHCLKFreq||, CODE, READONLY, ALIGN=2

                  CLK_GetHCLKFreq PROC
;;;136      */
;;;137    uint32_t CLK_GetHCLKFreq(void)
000000  b510              PUSH     {r4,lr}
;;;138    {
;;;139        SystemCoreClockUpdate();
000002  f7fffffe          BL       SystemCoreClockUpdate
;;;140        return SystemCoreClock;
000006  4801              LDR      r0,|L12.12|
000008  6800              LDR      r0,[r0,#0]  ; SystemCoreClock
;;;141    }
00000a  bd10              POP      {r4,pc}
;;;142    
                          ENDP

                  |L12.12|
                          DCD      SystemCoreClock

                          AREA ||i.CLK_GetHXTFreq||, CODE, READONLY, ALIGN=2

                  CLK_GetHXTFreq PROC
;;;108      */
;;;109    uint32_t CLK_GetHXTFreq(void)
000000  4802              LDR      r0,|L13.12|
;;;110    {
;;;111        if(CLK->PWRCON & CLK_PWRCON_XTL12M_EN_Msk)
000002  6800              LDR      r0,[r0,#0]
000004  07c0              LSLS     r0,r0,#31
000006  d000              BEQ      |L13.10|
;;;112            return __HXT;
000008  4801              LDR      r0,|L13.16|
                  |L13.10|
;;;113        else
;;;114            return 0;
;;;115    }
00000a  4770              BX       lr
;;;116    
                          ENDP

                  |L13.12|
                          DCD      0x50000200
                  |L13.16|
                          DCD      0x00b71b00

                          AREA ||i.CLK_GetLXTFreq||, CODE, READONLY, ALIGN=2

                  CLK_GetLXTFreq PROC
;;;122      */
;;;123    uint32_t CLK_GetLXTFreq(void)
000000  4804              LDR      r0,|L14.20|
;;;124    {
;;;125        if(CLK->PWRCON & CLK_PWRCON_XTL32K_EN_Msk)
000002  6800              LDR      r0,[r0,#0]
000004  0780              LSLS     r0,r0,#30
000006  d502              BPL      |L14.14|
;;;126            return __LXT;
000008  2001              MOVS     r0,#1
00000a  03c0              LSLS     r0,r0,#15
;;;127        else
;;;128            return 0;
;;;129    }
00000c  4770              BX       lr
                  |L14.14|
00000e  2000              MOVS     r0,#0                 ;128
000010  4770              BX       lr
;;;130    
                          ENDP

000012  0000              DCW      0x0000
                  |L14.20|
                          DCD      0x50000200

                          AREA ||i.CLK_GetPCLKFreq||, CODE, READONLY, ALIGN=2

                  CLK_GetPCLKFreq PROC
;;;160      */
;;;161    uint32_t CLK_GetPCLKFreq(void)
000000  b510              PUSH     {r4,lr}
;;;162    {
;;;163        SystemCoreClockUpdate();
000002  f7fffffe          BL       SystemCoreClockUpdate
;;;164        return SystemCoreClock;
000006  4801              LDR      r0,|L15.12|
000008  6800              LDR      r0,[r0,#0]  ; SystemCoreClock
;;;165    }
00000a  bd10              POP      {r4,pc}
;;;166    
                          ENDP

                  |L15.12|
                          DCD      SystemCoreClock

                          AREA ||i.CLK_Idle||, CODE, READONLY, ALIGN=2

                  CLK_Idle PROC
;;;90       */
;;;91     void CLK_Idle(void)
000000  4805              LDR      r0,|L16.24|
;;;92     {
;;;93         /* Set the processor uses sleep as its low power mode */
;;;94         SCB->SCR &= ~SCB_SCR_SLEEPDEEP_Msk;
000002  6901              LDR      r1,[r0,#0x10]
000004  2204              MOVS     r2,#4
000006  4391              BICS     r1,r1,r2
000008  6101              STR      r1,[r0,#0x10]
;;;95     
;;;96         /* Set chip in idle mode because of WFI command */
;;;97         CLK->PWRCON &= ~CLK_PWRCON_PWR_DOWN_EN_Msk;
00000a  4804              LDR      r0,|L16.28|
00000c  6801              LDR      r1,[r0,#0]
00000e  2280              MOVS     r2,#0x80
000010  4391              BICS     r1,r1,r2
000012  6001              STR      r1,[r0,#0]
;;;98     
;;;99         /* Chip enter idle mode after CPU run WFI instruction */
;;;100        __WFI();
000014  bf30              WFI      
;;;101    }
000016  4770              BX       lr
;;;102    
                          ENDP

                  |L16.24|
                          DCD      0xe000ed00
                  |L16.28|
                          DCD      0x50000200

                          AREA ||i.CLK_PowerDown||, CODE, READONLY, ALIGN=2

                  CLK_PowerDown PROC
;;;72       */
;;;73     void CLK_PowerDown(void)
000000  4806              LDR      r0,|L17.28|
;;;74     {
;;;75         /* Set the processor uses deep sleep as its low power mode */
;;;76         SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
000002  6901              LDR      r1,[r0,#0x10]
000004  2204              MOVS     r2,#4
000006  4311              ORRS     r1,r1,r2
000008  6101              STR      r1,[r0,#0x10]
;;;77     
;;;78         /* Set system Power-down enabled and Power-down entry condition */
;;;79         CLK->PWRCON |= (CLK_PWRCON_PWR_DOWN_EN_Msk | CLK_PWRCON_PD_WAIT_CPU_Msk);
00000a  4805              LDR      r0,|L17.32|
00000c  6801              LDR      r1,[r0,#0]
00000e  22ff              MOVS     r2,#0xff
000010  3281              ADDS     r2,r2,#0x81
000012  4311              ORRS     r1,r1,r2
000014  6001              STR      r1,[r0,#0]
;;;80     
;;;81         /* Chip enter Power-down mode after CPU run WFI instruction */
;;;82         __WFI();
000016  bf30              WFI      
;;;83     }
000018  4770              BX       lr
;;;84     
                          ENDP

00001a  0000              DCW      0x0000
                  |L17.28|
                          DCD      0xe000ed00
                  |L17.32|
                          DCD      0x50000200

                          AREA ||i.CLK_SetCoreClock||, CODE, READONLY, ALIGN=2

                  CLK_SetCoreClock PROC
;;;173      */
;;;174    uint32_t CLK_SetCoreClock(uint32_t u32Hclk)
000000  b5f8              PUSH     {r3-r7,lr}
;;;175    {
;;;176        uint32_t u32FomSel; /* u32FomSel=0x50(HCLK=72MHz), u32FomSel=0(HCLK=50MHz) */
;;;177        uint32_t u32Div, u32HIRCSTB;
;;;178    
;;;179        /* Read HIRC clock source stable flag */
;;;180        u32HIRCSTB = CLK->CLKSTATUS & CLK_CLKSTATUS_OSC22M_STB_Msk;
000002  492e              LDR      r1,|L18.188|
000004  68cc              LDR      r4,[r1,#0xc]
000006  2210              MOVS     r2,#0x10
;;;181    
;;;182        /* Boundary Check */
;;;183        if(u32Hclk > FREQ_72MHZ)
000008  4b2d              LDR      r3,|L18.192|
00000a  4014              ANDS     r4,r4,r2              ;180
00000c  4298              CMP      r0,r3
00000e  d901              BLS      |L18.20|
;;;184            u32Hclk = FREQ_72MHZ;
000010  4618              MOV      r0,r3
000012  e003              B        |L18.28|
                  |L18.20|
;;;185        if(u32Hclk < FREQ_25MHZ)
000014  4a2b              LDR      r2,|L18.196|
000016  4290              CMP      r0,r2
000018  d200              BCS      |L18.28|
;;;186            u32Hclk = FREQ_25MHZ;
00001a  4610              MOV      r0,r2
                  |L18.28|
;;;187    
;;;188        /* HCLK divider */
;;;189        u32Div = 1;
;;;190    
;;;191        /* Flash Access Delay */
;;;192        if(u32Hclk > FREQ_50MHZ)
00001c  4a2a              LDR      r2,|L18.200|
00001e  2501              MOVS     r5,#1                 ;189
000020  4290              CMP      r0,r2
000022  d901              BLS      |L18.40|
;;;193            u32FomSel = 0x50;
000024  2650              MOVS     r6,#0x50
000026  e000              B        |L18.42|
                  |L18.40|
;;;194        else
;;;195            u32FomSel = 0;
000028  2600              MOVS     r6,#0
                  |L18.42|
;;;196    
;;;197        /* Maximum Flash Access Delay for Safe */
;;;198        FMC->FATCON = (FMC->FATCON & (~(5 << 4))) | 0x50;
00002a  4a28              LDR      r2,|L18.204|
00002c  6992              LDR      r2,[r2,#0x18]
00002e  2750              MOVS     r7,#0x50
000030  433a              ORRS     r2,r2,r7
000032  4f26              LDR      r7,|L18.204|
000034  61ba              STR      r2,[r7,#0x18]
;;;199    
;;;200        /* Switch to HIRC for Safe. Avoid HCLK too high when applying new divider. */
;;;201        CLK->PWRCON |= CLK_PWRCON_OSC22M_EN_Msk;
000036  680a              LDR      r2,[r1,#0]
000038  2704              MOVS     r7,#4
00003a  433a              ORRS     r2,r2,r7
00003c  600a              STR      r2,[r1,#0]
                  |L18.62|
;;;202        while((CLK->CLKSTATUS & CLK_CLKSTATUS_OSC22M_STB_Msk) == 0);
00003e  68ca              LDR      r2,[r1,#0xc]
000040  06d2              LSLS     r2,r2,#27
000042  d5fc              BPL      |L18.62|
;;;203        CLK->CLKSEL0 = (CLK->CLKSEL0 & (~CLK_CLKSEL0_HCLK_S_Msk)) | CLK_CLKSEL0_HCLK_S_HIRC;
000044  491d              LDR      r1,|L18.188|
000046  690a              LDR      r2,[r1,#0x10]
000048  2707              MOVS     r7,#7
00004a  433a              ORRS     r2,r2,r7
00004c  610a              STR      r2,[r1,#0x10]
;;;204    
;;;205        /* Disable PLL to Avoid PLL Unstable while Setting */
;;;206        CLK->PLLCON |= CLK_PLLCON_PD_Msk;
00004e  6a0a              LDR      r2,[r1,#0x20]
000050  01cf              LSLS     r7,r1,#7
000052  433a              ORRS     r2,r2,r7
000054  620a              STR      r2,[r1,#0x20]
;;;207    
;;;208        /* Configure PLL setting if HXT clock is stable */
;;;209        if(CLK->CLKSTATUS & CLK_CLKSTATUS_XTL12M_STB_Msk)
000056  68c9              LDR      r1,[r1,#0xc]
000058  07c9              LSLS     r1,r1,#31
00005a  d00e              BEQ      |L18.122|
;;;210        {
;;;211            if(u32Hclk == FREQ_72MHZ)
00005c  4298              CMP      r0,r3
00005e  d106              BNE      |L18.110|
;;;212            {
;;;213                /* PLL = 144MHz, HCLK = PLL / 2 (This is for using USB(48MHz) with HCLK=72MHz) */
;;;214                u32Hclk = CLK_EnablePLL(CLK_PLLCON_PLL_SRC_HXT, u32Hclk * 2);
000060  0041              LSLS     r1,r0,#1
000062  2000              MOVS     r0,#0
000064  f7fffffe          BL       CLK_EnablePLL
000068  4607              MOV      r7,r0
;;;215                u32Div = 2;
00006a  2502              MOVS     r5,#2
00006c  e00f              B        |L18.142|
                  |L18.110|
;;;216            }
;;;217            else
;;;218                u32Hclk = CLK_EnablePLL(CLK_PLLCON_PLL_SRC_HXT, u32Hclk);
00006e  4601              MOV      r1,r0
000070  2000              MOVS     r0,#0
000072  f7fffffe          BL       CLK_EnablePLL
000076  4607              MOV      r7,r0
000078  e009              B        |L18.142|
                  |L18.122|
;;;219        }
;;;220    
;;;221        /* Configure PLL setting if HXT clock is not stable */
;;;222        else
;;;223        {
;;;224            u32Hclk = CLK_EnablePLL(CLK_PLLCON_PLL_SRC_HIRC, u32Hclk);
00007a  4601              MOV      r1,r0
00007c  2001              MOVS     r0,#1
00007e  04c0              LSLS     r0,r0,#19
000080  f7fffffe          BL       CLK_EnablePLL
000084  4607              MOV      r7,r0
;;;225    
;;;226            /* Read HIRC clock source stable flag */
;;;227            u32HIRCSTB = CLK->CLKSTATUS & CLK_CLKSTATUS_OSC22M_STB_Msk;
000086  480d              LDR      r0,|L18.188|
000088  68c4              LDR      r4,[r0,#0xc]
00008a  2010              MOVS     r0,#0x10
00008c  4004              ANDS     r4,r4,r0
                  |L18.142|
;;;228        }
;;;229    
;;;230        /* Flash Access Delay */
;;;231        FMC->FATCON = (FMC->FATCON & (~(5 << 4))) | u32FomSel;
00008e  480f              LDR      r0,|L18.204|
000090  6981              LDR      r1,[r0,#0x18]
000092  2250              MOVS     r2,#0x50
000094  4391              BICS     r1,r1,r2
000096  4331              ORRS     r1,r1,r6
000098  6181              STR      r1,[r0,#0x18]
;;;232    
;;;233        CLK_SetHCLK(CLK_CLKSEL0_HCLK_S_PLL, CLK_CLKDIV_HCLK(u32Div));
00009a  1e69              SUBS     r1,r5,#1
00009c  2002              MOVS     r0,#2
00009e  f7fffffe          BL       CLK_SetHCLK
;;;234    
;;;235        /* Disable HIRC if HIRC is disabled before setting core clock */
;;;236        if(u32HIRCSTB == 0)
0000a2  2c00              CMP      r4,#0
0000a4  d104              BNE      |L18.176|
;;;237            CLK->PWRCON &= ~CLK_PWRCON_OSC22M_EN_Msk;
0000a6  4805              LDR      r0,|L18.188|
0000a8  6802              LDR      r2,[r0,#0]
0000aa  2104              MOVS     r1,#4
0000ac  438a              BICS     r2,r2,r1
0000ae  6002              STR      r2,[r0,#0]
                  |L18.176|
;;;238    
;;;239        return u32Hclk / u32Div;
0000b0  4629              MOV      r1,r5
0000b2  4638              MOV      r0,r7
0000b4  f7fffffe          BL       __aeabi_uidivmod
;;;240    }
0000b8  bdf8              POP      {r3-r7,pc}
;;;241    
                          ENDP

0000ba  0000              DCW      0x0000
                  |L18.188|
                          DCD      0x50000200
                  |L18.192|
                          DCD      0x044aa200
                  |L18.196|
                          DCD      0x017d7840
                  |L18.200|
                          DCD      0x02faf080
                  |L18.204|
                          DCD      0x5000c000

                          AREA ||i.CLK_SetHCLK||, CODE, READONLY, ALIGN=2

                  CLK_SetHCLK PROC
;;;254      */
;;;255    void CLK_SetHCLK(uint32_t u32ClkSrc, uint32_t u32ClkDiv)
000000  b570              PUSH     {r4-r6,lr}
;;;256    {
;;;257        uint32_t u32HIRCSTB;
;;;258    
;;;259        /* Read HIRC clock source stable flag */
;;;260        u32HIRCSTB = CLK->CLKSTATUS & CLK_CLKSTATUS_OSC22M_STB_Msk;
000002  4c10              LDR      r4,|L19.68|
000004  68e5              LDR      r5,[r4,#0xc]
000006  2610              MOVS     r6,#0x10
;;;261    
;;;262        /* Switch to HIRC for Safe. Avoid HCLK too high when applying new divider. */
;;;263        CLK->PWRCON |= CLK_PWRCON_OSC22M_EN_Msk;
000008  6822              LDR      r2,[r4,#0]
00000a  4035              ANDS     r5,r5,r6              ;260
00000c  2304              MOVS     r3,#4
00000e  431a              ORRS     r2,r2,r3
000010  6022              STR      r2,[r4,#0]
                  |L19.18|
;;;264        while((CLK->CLKSTATUS & CLK_CLKSTATUS_OSC22M_STB_Msk) == 0);
000012  68e2              LDR      r2,[r4,#0xc]
000014  06d2              LSLS     r2,r2,#27
000016  d5fc              BPL      |L19.18|
;;;265        CLK->CLKSEL0 = (CLK->CLKSEL0 & (~CLK_CLKSEL0_HCLK_S_Msk)) | CLK_CLKSEL0_HCLK_S_HIRC;
000018  6922              LDR      r2,[r4,#0x10]
00001a  2307              MOVS     r3,#7
00001c  431a              ORRS     r2,r2,r3
00001e  6122              STR      r2,[r4,#0x10]
;;;266    
;;;267        /* Apply new Divider */
;;;268        CLK->CLKDIV = (CLK->CLKDIV & (~CLK_CLKDIV_HCLK_N_Msk)) | u32ClkDiv;
000020  69a2              LDR      r2,[r4,#0x18]
000022  0912              LSRS     r2,r2,#4
000024  0112              LSLS     r2,r2,#4
000026  430a              ORRS     r2,r2,r1
000028  61a2              STR      r2,[r4,#0x18]
;;;269    
;;;270        /* Switch to new HCLK source */
;;;271        CLK->CLKSEL0 = (CLK->CLKSEL0 & (~CLK_CLKSEL0_HCLK_S_Msk)) | u32ClkSrc;
00002a  6921              LDR      r1,[r4,#0x10]
00002c  4399              BICS     r1,r1,r3
00002e  4301              ORRS     r1,r1,r0
000030  6121              STR      r1,[r4,#0x10]
;;;272    
;;;273        /* Update System Core Clock */
;;;274        SystemCoreClockUpdate();
000032  f7fffffe          BL       SystemCoreClockUpdate
;;;275    
;;;276        /* Disable HIRC if HIRC is disabled before switching HCLK source */
;;;277        if(u32HIRCSTB == 0)
000036  2d00              CMP      r5,#0
000038  d102              BNE      |L19.64|
;;;278            CLK->PWRCON &= ~CLK_CLKSTATUS_OSC22M_STB_Msk;
00003a  6820              LDR      r0,[r4,#0]
00003c  43b0              BICS     r0,r0,r6
00003e  6020              STR      r0,[r4,#0]
                  |L19.64|
;;;279    }
000040  bd70              POP      {r4-r6,pc}
;;;280    
                          ENDP

000042  0000              DCW      0x0000
                  |L19.68|
                          DCD      0x50000200

                          AREA ||i.CLK_SetModuleClock||, CODE, READONLY, ALIGN=2

                  CLK_SetModuleClock PROC
;;;361    
;;;362    void CLK_SetModuleClock(uint32_t u32ModuleIdx, uint32_t u32ClkSrc, uint32_t u32ClkDiv)
000000  b5f0              PUSH     {r4-r7,lr}
;;;363    {
;;;364        uint32_t u32sel = 0, u32div = 0;
;;;365        uint32_t u32SelTbl[4] = {0x0, 0x4, 0xC, 0x24};
000002  4b29              LDR      r3,|L20.168|
000004  b086              SUB      sp,sp,#0x18           ;363
000006  461c              MOV      r4,r3
000008  3408              ADDS     r4,r4,#8
00000a  ccf0              LDM      r4,{r4-r7}
00000c  9400              STR      r4,[sp,#0]
00000e  ac01              ADD      r4,sp,#4
000010  c4e0              STM      r4!,{r5-r7}
000012  cb18              LDM      r3,{r3,r4}
;;;366        uint32_t u32DivTbl[2] = {0x0, 0x20};
;;;367    
;;;368        if(MODULE_CLKSEL_Msk(u32ModuleIdx) != MODULE_NoMsk)
000014  9304              STR      r3,[sp,#0x10]
000016  0e43              LSRS     r3,r0,#25
000018  9405              STR      r4,[sp,#0x14]
00001a  075b              LSLS     r3,r3,#29
00001c  d02d              BEQ      |L20.122|
;;;369        {
;;;370            /* Get clock select control register address */
;;;371            u32sel = (uint32_t)&CLK->CLKSEL0 + (u32SelTbl[MODULE_CLKSEL(u32ModuleIdx)]);
00001e  0083              LSLS     r3,r0,#2
000020  0f9b              LSRS     r3,r3,#30
000022  009b              LSLS     r3,r3,#2
000024  466c              MOV      r4,sp
000026  58e3              LDR      r3,[r4,r3]
000028  4c20              LDR      r4,|L20.172|
00002a  191b              ADDS     r3,r3,r4
;;;372            /* Set new clock selection setting */
;;;373            M32(u32sel) = (M32(u32sel) & (~(MODULE_CLKSEL_Msk(u32ModuleIdx) << MODULE_CLKSEL_Pos(u32ModuleIdx)))) | u32ClkSrc;
00002c  0104              LSLS     r4,r0,#4
00002e  0f65              LSRS     r5,r4,#29
000030  01c4              LSLS     r4,r0,#7
000032  0ee4              LSRS     r4,r4,#27
000034  40a5              LSLS     r5,r5,r4
000036  681c              LDR      r4,[r3,#0]
000038  43ac              BICS     r4,r4,r5
00003a  430c              ORRS     r4,r4,r1
00003c  601c              STR      r4,[r3,#0]
;;;374    
;;;375            /* We need to set CLKSEL2 ext control bit for PWM */
;;;376            if(u32ModuleIdx == PWM01_MODULE)
;;;377                CLK->CLKSEL2 = (CLK->CLKSEL2 & (~CLK_CLKSEL2_PWM01_S_E_Msk)) | (u32ClkSrc & CLK_CLKSEL2_PWM01_S_E_Msk);
00003e  4b1b              LDR      r3,|L20.172|
000040  4c1b              LDR      r4,|L20.176|
000042  3b10              SUBS     r3,r3,#0x10
000044  42a0              CMP      r0,r4                 ;376
000046  d103              BNE      |L20.80|
000048  69dd              LDR      r5,[r3,#0x1c]
00004a  24ff              MOVS     r4,#0xff
00004c  3401              ADDS     r4,#1
00004e  e010              B        |L20.114|
                  |L20.80|
;;;378            else if(u32ModuleIdx == PWM23_MODULE)
000050  4c18              LDR      r4,|L20.180|
000052  42a0              CMP      r0,r4
000054  d107              BNE      |L20.102|
;;;379                CLK->CLKSEL2 = (CLK->CLKSEL2 & (~CLK_CLKSEL2_PWM23_S_E_Msk)) | (u32ClkSrc & CLK_CLKSEL2_PWM23_S_E_Msk);
000056  69dc              LDR      r4,[r3,#0x1c]
000058  2501              MOVS     r5,#1
00005a  026d              LSLS     r5,r5,#9
00005c  43ac              BICS     r4,r4,r5
00005e  4029              ANDS     r1,r1,r5
000060  430c              ORRS     r4,r4,r1
000062  61dc              STR      r4,[r3,#0x1c]
000064  e009              B        |L20.122|
                  |L20.102|
;;;380            else if(u32ModuleIdx == PWM45_MODULE)
000066  4c14              LDR      r4,|L20.184|
000068  42a0              CMP      r0,r4
00006a  d106              BNE      |L20.122|
;;;381                CLK->CLKSEL2 = (CLK->CLKSEL2 & (~CLK_CLKSEL2_PWM45_S_E_Msk)) | (u32ClkSrc & CLK_CLKSEL2_PWM45_S_E_Msk);
00006c  69dd              LDR      r5,[r3,#0x1c]
00006e  2401              MOVS     r4,#1
000070  02a4              LSLS     r4,r4,#10
                  |L20.114|
000072  43a5              BICS     r5,r5,r4
000074  4021              ANDS     r1,r1,r4
000076  430d              ORRS     r5,r5,r1
000078  61dd              STR      r5,[r3,#0x1c]
                  |L20.122|
;;;382        }
;;;383    
;;;384        if(MODULE_CLKDIV_Msk(u32ModuleIdx) != MODULE_NoMsk)
00007a  0a83              LSRS     r3,r0,#10
00007c  0619              LSLS     r1,r3,#24
00007e  0e09              LSRS     r1,r1,#24
000080  d00f              BEQ      |L20.162|
;;;385        {
;;;386            /* Get clock divider control register address */
;;;387            u32div = (uint32_t)&CLK->CLKDIV + (u32DivTbl[MODULE_CLKDIV(u32ModuleIdx)]);
000082  0301              LSLS     r1,r0,#12
000084  0f89              LSRS     r1,r1,#30
000086  0089              LSLS     r1,r1,#2
000088  ac04              ADD      r4,sp,#0x10
00008a  5861              LDR      r1,[r4,r1]
00008c  4c07              LDR      r4,|L20.172|
;;;388            /* Apply new divider */
;;;389            M32(u32div) = (M32(u32div) & (~(MODULE_CLKDIV_Msk(u32ModuleIdx) << MODULE_CLKDIV_Pos(u32ModuleIdx)))) | u32ClkDiv;
00008e  0580              LSLS     r0,r0,#22
000090  3408              ADDS     r4,r4,#8              ;387
000092  1909              ADDS     r1,r1,r4              ;387
000094  b2db              UXTB     r3,r3
000096  0ec0              LSRS     r0,r0,#27
000098  4083              LSLS     r3,r3,r0
00009a  6808              LDR      r0,[r1,#0]
00009c  4398              BICS     r0,r0,r3
00009e  4310              ORRS     r0,r0,r2
0000a0  6008              STR      r0,[r1,#0]
                  |L20.162|
;;;390        }
;;;391    }
0000a2  b006              ADD      sp,sp,#0x18
0000a4  bdf0              POP      {r4-r7,pc}
;;;392    
                          ENDP

0000a6  0000              DCW      0x0000
                  |L20.168|
                          DCD      ||.constdata||
                  |L20.172|
                          DCD      0x50000210
                  |L20.176|
                          DCD      0x57c00014
                  |L20.180|
                          DCD      0x57e00015
                  |L20.184|
                          DCD      0x66400016

                          AREA ||i.CLK_SetSysTickClockSrc||, CODE, READONLY, ALIGN=2

                  CLK_SetSysTickClockSrc PROC
;;;403      */
;;;404    void CLK_SetSysTickClockSrc(uint32_t u32ClkSrc)
000000  4a03              LDR      r2,|L21.16|
;;;405    {
;;;406        CLK->CLKSEL0 = (CLK->CLKSEL0 & ~CLK_CLKSEL0_STCLK_S_Msk) | u32ClkSrc;
000002  6911              LDR      r1,[r2,#0x10]
000004  2338              MOVS     r3,#0x38
000006  4399              BICS     r1,r1,r3
000008  4301              ORRS     r1,r1,r0
00000a  6111              STR      r1,[r2,#0x10]
;;;407    }
00000c  4770              BX       lr
;;;408    
                          ENDP

00000e  0000              DCW      0x0000
                  |L21.16|
                          DCD      0x50000200

                          AREA ||i.CLK_WaitClockReady||, CODE, READONLY, ALIGN=2

                  CLK_WaitClockReady PROC
;;;663      */
;;;664    uint32_t CLK_WaitClockReady(uint32_t u32ClkMask)
000000  b510              PUSH     {r4,lr}
;;;665    {
000002  4604              MOV      r4,r0
;;;666        int32_t i32TimeOutCnt = 1200000;
000004  4907              LDR      r1,|L22.36|
;;;667    
;;;668        while((CLK->CLKSTATUS & u32ClkMask) != u32ClkMask)
000006  4b08              LDR      r3,|L22.40|
000008  e005              B        |L22.22|
                  |L22.10|
;;;669        {
;;;670            if(i32TimeOutCnt-- <= 0)
00000a  460a              MOV      r2,r1
00000c  1e49              SUBS     r1,r1,#1
00000e  2a00              CMP      r2,#0
000010  dc01              BGT      |L22.22|
;;;671                return 0;
000012  2000              MOVS     r0,#0
;;;672        }
;;;673    
;;;674        return 1;
;;;675    }
000014  bd10              POP      {r4,pc}
                  |L22.22|
000016  68da              LDR      r2,[r3,#0xc]          ;668
000018  4620              MOV      r0,r4                 ;668
00001a  4390              BICS     r0,r0,r2              ;668
00001c  d1f5              BNE      |L22.10|
00001e  2001              MOVS     r0,#1                 ;674
000020  bd10              POP      {r4,pc}
;;;676    
                          ENDP

000022  0000              DCW      0x0000
                  |L22.36|
                          DCD      0x00124f80
                  |L22.40|
                          DCD      0x50000200

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                          DCD      0x00000000
                          DCD      0x00000020
                          DCD      0x00000000
                          DCD      0x00000004
                          DCD      0x0000000c
                          DCD      0x00000024
                          DCD      0x00000000
                          DCD      0x00000004
                          DCD      0x0000002c
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000004
                          DCD      0x0000002c
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\Library\\StdDriver\\src\\clk.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___5_clk_c_9b5832dc____REV16|
#line 118 "..\\..\\..\\Library\\CMSIS\\Include\\core_cmInstr.h"
|__asm___5_clk_c_9b5832dc____REV16| PROC
#line 119

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___5_clk_c_9b5832dc____REVSH|
#line 132
|__asm___5_clk_c_9b5832dc____REVSH| PROC
#line 133

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
