; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\misc_config.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\misc_config.d --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 -I..\..\..\Library\CMSIS\Include -I..\..\..\Library\Device\Nuvoton\NUC029xEE\Include -I..\..\..\Library\StdDriver\inc -I..\..\Template -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=528 --omf_browse=.\obj\misc_config.crf ..\misc_config.c]
                          THUMB

                          AREA ||i.compare_buffer||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_d
                          REQUIRE _printf_x
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_longlong_hex
                          REQUIRE _printf_s
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                  compare_buffer PROC
;;;36     
;;;37     void compare_buffer(unsigned char *src, unsigned char *des, int nBytes)
000000  b5f7              PUSH     {r0-r2,r4-r7,lr}
;;;38     {
000002  4616              MOV      r6,r2
000004  460f              MOV      r7,r1
;;;39         unsigned short  i = 0;	
000006  2400              MOVS     r4,#0
;;;40     	
;;;41         #if 1
;;;42         for (i = 0; i < nBytes; i++)
;;;43         {
;;;44             if (src[i] != des[i])
;;;45             {
;;;46                 dbg_printf("error idx : %4d : 0x%2X , 0x%2X\r\n", i , src[i],des[i]);
;;;47     			FLAG_MISC_ERROR = 1;//set_flag(flag_error , ENABLE);
000008  4d11              LDR      r5,|L1.80|
00000a  e00e              B        |L1.42|
                  |L1.12|
00000c  9800              LDR      r0,[sp,#0]            ;44
00000e  5d3b              LDRB     r3,[r7,r4]            ;44
000010  5d02              LDRB     r2,[r0,r4]            ;44
000012  429a              CMP      r2,r3                 ;44
000014  d007              BEQ      |L1.38|
000016  4621              MOV      r1,r4                 ;46
000018  a00e              ADR      r0,|L1.84|
00001a  f7fffffe          BL       __2printf
00001e  7828              LDRB     r0,[r5,#0]  ; flag_MISC_CTL
000020  2101              MOVS     r1,#1
000022  4308              ORRS     r0,r0,r1
000024  7028              STRB     r0,[r5,#0]
                  |L1.38|
000026  1c64              ADDS     r4,r4,#1
000028  b2a4              UXTH     r4,r4                 ;42
                  |L1.42|
00002a  42b4              CMP      r4,r6                 ;42
00002c  dbee              BLT      |L1.12|
;;;48             }
;;;49         }
;;;50     
;;;51     	if (!FLAG_MISC_ERROR)//(!is_flag_set(flag_error))
00002e  7828              LDRB     r0,[r5,#0]  ; flag_MISC_CTL
000030  07c0              LSLS     r0,r0,#31
000032  d103              BNE      |L1.60|
;;;52     	{
;;;53         	dbg_printf("%s complete \r\n" , __FUNCTION__);	
000034  4910              LDR      r1,|L1.120|
000036  a011              ADR      r0,|L1.124|
000038  f7fffffe          BL       __2printf
                  |L1.60|
;;;54     	}
;;;55     
;;;56         dbg_printf("%s end \r\n" , __FUNCTION__);
00003c  490e              LDR      r1,|L1.120|
00003e  a013              ADR      r0,|L1.140|
000040  f7fffffe          BL       __2printf
;;;57     	FLAG_MISC_ERROR = 0;//set_flag(flag_error , DISABLE);	    
000044  7828              LDRB     r0,[r5,#0]  ; flag_MISC_CTL
000046  0840              LSRS     r0,r0,#1
000048  0040              LSLS     r0,r0,#1
00004a  7028              STRB     r0,[r5,#0]
;;;58         #else
;;;59         if (memcmp(src, des, nBytes))
;;;60         {
;;;61             dbg_printf("\nMismatch!! - %d\n", nBytes);
;;;62             for (i = 0; i < nBytes; i++)
;;;63                 dbg_printf("0x%02x    0x%02x\n", src[i], des[i]);
;;;64             return -1;
;;;65         }
;;;66         #endif
;;;67     
;;;68     }
00004c  bdfe              POP      {r1-r7,pc}
;;;69     
                          ENDP

00004e  0000              DCW      0x0000
                  |L1.80|
                          DCD      ||.data||
                  |L1.84|
000054  6572726f          DCB      "error idx : %4d : 0x%2X , 0x%2X\r\n",0
000058  72206964
00005c  78203a20
000060  25346420
000064  3a203078
000068  25325820
00006c  2c203078
000070  2532580d
000074  0a00    
000076  00                DCB      0
000077  00                DCB      0
                  |L1.120|
                          DCD      ||.constdata||
                  |L1.124|
00007c  25732063          DCB      "%s complete \r\n",0
000080  6f6d706c
000084  65746520
000088  0d0a00  
00008b  00                DCB      0
                  |L1.140|
00008c  25732065          DCB      "%s end \r\n",0
000090  6e64200d
000094  0a00    
000096  00                DCB      0
000097  00                DCB      0

                          AREA ||i.copy_buffer||, CODE, READONLY, ALIGN=1

                  copy_buffer PROC
;;;85     
;;;86     void copy_buffer(void *dest, void *src, unsigned int size)
000000  b510              PUSH     {r4,lr}
;;;87     {
;;;88         unsigned char *pu8Src, *pu8Dest;
;;;89         unsigned int i;
;;;90         
;;;91         pu8Dest = (unsigned char *)dest;
;;;92         pu8Src  = (unsigned char *)src;
;;;93     
;;;94     
;;;95     	#if 0
;;;96     	  while (size--)
;;;97     	    *pu8Dest++ = *pu8Src++;
;;;98     	#else
;;;99         for (i = 0; i < size; i++)
000002  2300              MOVS     r3,#0
000004  e002              B        |L2.12|
                  |L2.6|
;;;100            pu8Dest[i] = pu8Src[i];
000006  5ccc              LDRB     r4,[r1,r3]
000008  54c4              STRB     r4,[r0,r3]
00000a  1c5b              ADDS     r3,r3,#1
                  |L2.12|
00000c  4293              CMP      r3,r2                 ;99
00000e  d3fa              BCC      |L2.6|
;;;101    	#endif
;;;102    }
000010  bd10              POP      {r4,pc}
;;;103    
                          ENDP


                          AREA ||i.dump_buffer||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_flags
                          REQUIRE _printf_x
                          REQUIRE _printf_longlong_hex
                  dump_buffer PROC
;;;103    
;;;104    void dump_buffer(unsigned char *pucBuff, int nBytes)
000000  b5f8              PUSH     {r3-r7,lr}
;;;105    {
000002  4606              MOV      r6,r0
000004  460d              MOV      r5,r1
;;;106        unsigned short  i = 0;
000006  2400              MOVS     r4,#0
;;;107        
;;;108        dbg_printf("dump_buffer : %2d\r\n" , nBytes);    
000008  a00b              ADR      r0,|L3.56|
00000a  f7fffffe          BL       __2printf
;;;109        for (i = 0 ; i < nBytes ; i++)
;;;110        {
;;;111            dbg_printf("0x%02X," , pucBuff[i]);
;;;112            if ((i+1)%8 ==0)
00000e  2701              MOVS     r7,#1
000010  077f              LSLS     r7,r7,#29
000012  e00b              B        |L3.44|
                  |L3.20|
000014  5d31              LDRB     r1,[r6,r4]            ;111
000016  a00d              ADR      r0,|L3.76|
000018  f7fffffe          BL       __2printf
00001c  0760              LSLS     r0,r4,#29
00001e  42f8              CMN      r0,r7
000020  d102              BNE      |L3.40|
;;;113            {
;;;114                dbg_printf("\r\n");
000022  a00c              ADR      r0,|L3.84|
000024  f7fffffe          BL       __2printf
                  |L3.40|
000028  1c64              ADDS     r4,r4,#1
00002a  b2a4              UXTH     r4,r4                 ;109
                  |L3.44|
00002c  42ac              CMP      r4,r5                 ;109
00002e  dbf1              BLT      |L3.20|
;;;115            }            
;;;116        }
;;;117        dbg_printf("\r\n\r\n");
000030  a009              ADR      r0,|L3.88|
000032  f7fffffe          BL       __2printf
;;;118    }
000036  bdf8              POP      {r3-r7,pc}
;;;119    
                          ENDP

                  |L3.56|
000038  64756d70          DCB      "dump_buffer : %2d\r\n",0
00003c  5f627566
000040  66657220
000044  3a202532
000048  640d0a00
                  |L3.76|
00004c  30782530          DCB      "0x%02X,",0
000050  32582c00
                  |L3.84|
000054  0d0a00            DCB      "\r\n",0
000057  00                DCB      0
                  |L3.88|
000058  0d0a0d0a          DCB      "\r\n\r\n",0
00005c  00      
00005d  00                DCB      0
00005e  00                DCB      0
00005f  00                DCB      0

                          AREA ||i.dump_buffer_hex||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_flags
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_x
                          REQUIRE _printf_longlong_hex
                          REQUIRE _printf_c
                          REQUIRE _printf_str
                  dump_buffer_hex PROC
;;;119    
;;;120    void dump_buffer_hex(unsigned char *pucBuff, int nBytes)
000000  b5f8              PUSH     {r3-r7,lr}
;;;121    {
000002  460e              MOV      r6,r1
000004  4607              MOV      r7,r0
;;;122        int     nIdx, i;
;;;123    
;;;124        nIdx = 0;
000006  2500              MOVS     r5,#0
000008  e025              B        |L4.86|
                  |L4.10|
;;;125        while (nBytes > 0)
;;;126        {
;;;127            dbg_printf("0x%04X  ", nIdx);
00000a  4629              MOV      r1,r5
00000c  a015              ADR      r0,|L4.100|
00000e  f7fffffe          BL       __2printf
;;;128            for (i = 0; i < 16; i++)
000012  2400              MOVS     r4,#0
                  |L4.20|
;;;129                dbg_printf("%02X ", pucBuff[nIdx + i]);
000014  1928              ADDS     r0,r5,r4
000016  5c39              LDRB     r1,[r7,r0]
000018  a015              ADR      r0,|L4.112|
00001a  f7fffffe          BL       __2printf
00001e  1c64              ADDS     r4,r4,#1
000020  2c10              CMP      r4,#0x10              ;128
000022  dbf7              BLT      |L4.20|
;;;130            dbg_printf("  ");
000024  a014              ADR      r0,|L4.120|
000026  f7fffffe          BL       __2printf
;;;131            for (i = 0; i < 16; i++)
00002a  2400              MOVS     r4,#0
                  |L4.44|
;;;132            {
;;;133                if ((pucBuff[nIdx + i] >= 0x20) && (pucBuff[nIdx + i] < 127))
00002c  1928              ADDS     r0,r5,r4
00002e  5c39              LDRB     r1,[r7,r0]
000030  4608              MOV      r0,r1
000032  3820              SUBS     r0,r0,#0x20
000034  285f              CMP      r0,#0x5f
000036  d203              BCS      |L4.64|
;;;134                    dbg_printf("%c", pucBuff[nIdx + i]);
000038  a010              ADR      r0,|L4.124|
00003a  f7fffffe          BL       __2printf
00003e  e002              B        |L4.70|
                  |L4.64|
;;;135                else
;;;136                    dbg_printf(".");
000040  a00f              ADR      r0,|L4.128|
000042  f7fffffe          BL       __2printf
                  |L4.70|
000046  1c64              ADDS     r4,r4,#1
000048  1e76              SUBS     r6,r6,#1
00004a  2c10              CMP      r4,#0x10              ;131
00004c  dbee              BLT      |L4.44|
;;;137                nBytes--;
;;;138            }
;;;139            nIdx += 16;
;;;140            dbg_printf("\n");
00004e  a00d              ADR      r0,|L4.132|
000050  3510              ADDS     r5,r5,#0x10
000052  f7fffffe          BL       __2printf
                  |L4.86|
000056  2e00              CMP      r6,#0                 ;125
000058  dcd7              BGT      |L4.10|
;;;141        }
;;;142        dbg_printf("\n");
00005a  a00a              ADR      r0,|L4.132|
00005c  f7fffffe          BL       __2printf
;;;143    }
000060  bdf8              POP      {r3-r7,pc}
;;;144    
                          ENDP

000062  0000              DCW      0x0000
                  |L4.100|
000064  30782530          DCB      "0x%04X  ",0
000068  34582020
00006c  00      
00006d  00                DCB      0
00006e  00                DCB      0
00006f  00                DCB      0
                  |L4.112|
000070  25303258          DCB      "%02X ",0
000074  2000    
000076  00                DCB      0
000077  00                DCB      0
                  |L4.120|
000078  202000            DCB      "  ",0
00007b  00                DCB      0
                  |L4.124|
00007c  256300            DCB      "%c",0
00007f  00                DCB      0
                  |L4.128|
000080  2e00              DCB      ".",0
000082  00                DCB      0
000083  00                DCB      0
                  |L4.132|
000084  0a00              DCB      "\n",0
000086  00                DCB      0
000087  00                DCB      0

                          AREA ||i.reset_buffer||, CODE, READONLY, ALIGN=1

                  reset_buffer PROC
;;;69     
;;;70     void reset_buffer(void *dest, unsigned int val, unsigned int size)
000000  b2c9              UXTB     r1,r1
;;;71     {
000002  e001              B        |L5.8|
                  |L5.4|
;;;72         unsigned char *pu8Dest;
;;;73     //    unsigned int i;
;;;74         
;;;75         pu8Dest = (unsigned char *)dest;
;;;76     
;;;77     	#if 1
;;;78     	while (size-- > 0)
;;;79     		*pu8Dest++ = val;
000004  7001              STRB     r1,[r0,#0]
000006  1c40              ADDS     r0,r0,#1
                  |L5.8|
000008  1e52              SUBS     r2,r2,#1
00000a  d2fb              BCS      |L5.4|
;;;80     	#else
;;;81     	memset(pu8Dest, val, size * (sizeof(pu8Dest[0]) ));
;;;82     	#endif
;;;83     	
;;;84     }
00000c  4770              BX       lr
;;;85     
                          ENDP


                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  __FUNCTION__
000000  636f6d70          DCB      0x63,0x6f,0x6d,0x70
000004  6172655f          DCB      0x61,0x72,0x65,0x5f
000008  62756666          DCB      0x62,0x75,0x66,0x66
00000c  657200            DCB      0x65,0x72,0x00

                          AREA ||.data||, DATA, ALIGN=0

                  flag_MISC_CTL
000000  00                DCB      0x00
