; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\uart.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\uart.d --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 -I..\..\..\Library\CMSIS\Include -I..\..\..\Library\Device\Nuvoton\NUC029xEE\Include -I..\..\..\Library\StdDriver\inc -I..\..\Template -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=528 --omf_browse=.\obj\uart.crf ..\..\..\Library\StdDriver\src\uart.c]
                          THUMB

                          AREA ||i.CLK_GetPLLClockFreq||, CODE, READONLY, ALIGN=2

                  CLK_GetPLLClockFreq PROC
;;;355      */
;;;356    __STATIC_INLINE uint32_t CLK_GetPLLClockFreq(void)
000000  b508              PUSH     {r3,lr}
;;;357    {
;;;358        uint32_t u32PllFreq = 0, u32PllReg;
;;;359        uint32_t u32FIN, u32NF, u32NR, u32NO;
;;;360        uint8_t au8NoTbl[4] = {1, 2, 2, 4};
000002  a011              ADR      r0,|L1.72|
000004  6800              LDR      r0,[r0,#0]
;;;361    
;;;362        u32PllReg = CLK->PLLCON;
000006  9000              STR      r0,[sp,#0]
000008  4810              LDR      r0,|L1.76|
00000a  6a01              LDR      r1,[r0,#0x20]
;;;363    
;;;364        if(u32PllReg & (CLK_PLLCON_PD_Msk | CLK_PLLCON_OE_Msk))
00000c  1300              ASRS     r0,r0,#12
00000e  4201              TST      r1,r0
000010  d001              BEQ      |L1.22|
;;;365            return 0;           /* PLL is in power down mode or fix low */
000012  2000              MOVS     r0,#0
                  |L1.20|
;;;366    
;;;367        if(u32PllReg & CLK_PLLCON_PLL_SRC_HIRC)
;;;368            u32FIN = __HIRC;    /* PLL source clock from HIRC */
;;;369        else
;;;370            u32FIN = __HXT;     /* PLL source clock from HXT */
;;;371    
;;;372        if(u32PllReg & CLK_PLLCON_BP_Msk)
;;;373            return u32FIN;      /* PLL is in bypass mode */
;;;374    
;;;375        /* PLL is output enabled in normal work mode */
;;;376        u32NO = au8NoTbl[((u32PllReg & CLK_PLLCON_OUT_DV_Msk) >> CLK_PLLCON_OUT_DV_Pos)];
;;;377        u32NF = ((u32PllReg & CLK_PLLCON_FB_DV_Msk) >> CLK_PLLCON_FB_DV_Pos) + 2;
;;;378        u32NR = ((u32PllReg & CLK_PLLCON_IN_DV_Msk) >> CLK_PLLCON_IN_DV_Pos) + 2;
;;;379    
;;;380        /* u32FIN is shifted 2 bits to avoid overflow */
;;;381        u32PllFreq = (((u32FIN >> 2) * u32NF) / (u32NR * u32NO) << 2);
;;;382    
;;;383        return u32PllFreq;
;;;384    }
000014  bd08              POP      {r3,pc}
                  |L1.22|
000016  0308              LSLS     r0,r1,#12             ;367
000018  d501              BPL      |L1.30|
00001a  480d              LDR      r0,|L1.80|
00001c  e000              B        |L1.32|
                  |L1.30|
00001e  480d              LDR      r0,|L1.84|
                  |L1.32|
000020  038a              LSLS     r2,r1,#14             ;372
000022  d4f7              BMI      |L1.20|
000024  040a              LSLS     r2,r1,#16             ;376
000026  0f92              LSRS     r2,r2,#30             ;376
000028  466b              MOV      r3,sp                 ;376
00002a  5c9b              LDRB     r3,[r3,r2]            ;376
00002c  05ca              LSLS     r2,r1,#23             ;377
00002e  0489              LSLS     r1,r1,#18             ;378
000030  0dd2              LSRS     r2,r2,#23             ;377
000032  0ec9              LSRS     r1,r1,#27             ;378
000034  1c89              ADDS     r1,r1,#2              ;378
000036  0880              LSRS     r0,r0,#2              ;381
000038  1c92              ADDS     r2,r2,#2              ;381
00003a  4359              MULS     r1,r3,r1              ;381
00003c  4350              MULS     r0,r2,r0              ;381
00003e  f7fffffe          BL       __aeabi_uidivmod
000042  0080              LSLS     r0,r0,#2              ;381
000044  bd08              POP      {r3,pc}
;;;385    
                          ENDP

000046  0000              DCW      0x0000
                  |L1.72|
000048  01020204          DCB      1,2,2,4
                  |L1.76|
                          DCD      0x50000200
                  |L1.80|
                          DCD      0x01518000
                  |L1.84|
                          DCD      0x00b71b00

                          AREA ||i.UART_ClearIntFlag||, CODE, READONLY, ALIGN=2

                  UART_ClearIntFlag PROC
;;;38      */
;;;39     void UART_ClearIntFlag(UART_T* uart , uint32_t u32InterruptFlag)
000000  054a              LSLS     r2,r1,#21
;;;40     {
000002  d503              BPL      |L2.12|
;;;41     
;;;42         if(u32InterruptFlag & UART_ISR_RLS_INT_Msk)   /* clear Receive Line Status Interrupt */
;;;43         {
;;;44             uart->FSR = UART_FSR_BIF_Msk | UART_FSR_FEF_Msk | UART_FSR_PEF_Msk;
000004  2270              MOVS     r2,#0x70
000006  6182              STR      r2,[r0,#0x18]
;;;45             uart->FSR = UART_FSR_RS485_ADD_DETF_Msk;
000008  2208              MOVS     r2,#8
00000a  6182              STR      r2,[r0,#0x18]
                  |L2.12|
;;;46         }
;;;47     
;;;48         if(u32InterruptFlag & UART_ISR_MODEM_INT_Msk)  /* clear Modem Interrupt */
00000c  050a              LSLS     r2,r1,#20
00000e  d503              BPL      |L2.24|
;;;49             uart->MSR |= UART_MSR_DCTSF_Msk;
000010  6942              LDR      r2,[r0,#0x14]
000012  2301              MOVS     r3,#1
000014  431a              ORRS     r2,r2,r3
000016  6142              STR      r2,[r0,#0x14]
                  |L2.24|
;;;50     
;;;51         if(u32InterruptFlag & UART_ISR_BUF_ERR_INT_Msk)   /* clear Buffer Error Interrupt */
000018  048a              LSLS     r2,r1,#18
00001a  d501              BPL      |L2.32|
;;;52         {
;;;53             uart->FSR = UART_FSR_RX_OVER_IF_Msk | UART_FSR_TX_OVER_IF_Msk;
00001c  4a04              LDR      r2,|L2.48|
00001e  6182              STR      r2,[r0,#0x18]
                  |L2.32|
;;;54         }
;;;55     
;;;56         if(u32InterruptFlag & UART_ISR_LIN_INT_Msk)   /* clear LIN break Interrupt */
000020  0409              LSLS     r1,r1,#16
000022  d503              BPL      |L2.44|
;;;57         {
;;;58             uart->ISR = UART_ISR_LIN_IF_Msk;
000024  2180              MOVS     r1,#0x80
000026  61c1              STR      r1,[r0,#0x1c]
;;;59             uart->LIN_SR = UART_LIN_SR_BIT_ERR_F_Msk   | UART_LIN_SR_LINS_BKDET_F_Msk  |
000028  4902              LDR      r1,|L2.52|
00002a  6381              STR      r1,[r0,#0x38]
                  |L2.44|
;;;60                            UART_LIN_SR_LINS_SYNC_F_Msk | UART_LIN_SR_LINS_IDPERR_F_Msk |
;;;61                            UART_LIN_SR_LINS_HERR_F_Msk | UART_LIN_SR_LINS_HDET_F_Msk ;
;;;62         }
;;;63     
;;;64     }
00002c  4770              BX       lr
;;;65     
                          ENDP

00002e  0000              DCW      0x0000
                  |L2.48|
                          DCD      0x01000001
                  |L2.52|
                          DCD      0x0000030f

                          AREA ||i.UART_Close||, CODE, READONLY, ALIGN=1

                  UART_Close PROC
;;;74      */
;;;75     void UART_Close(UART_T* uart)
000000  2100              MOVS     r1,#0
;;;76     {
;;;77         uart->IER = 0;
000002  6041              STR      r1,[r0,#4]
;;;78     }
000004  4770              BX       lr
;;;79     
                          ENDP


                          AREA ||i.UART_DisableFlowCtrl||, CODE, READONLY, ALIGN=1

                  UART_DisableFlowCtrl PROC
;;;89      */
;;;90     void UART_DisableFlowCtrl(UART_T* uart)
000000  6841              LDR      r1,[r0,#4]
;;;91     {
;;;92         uart->IER &= ~(UART_IER_AUTO_RTS_EN_Msk | UART_IER_AUTO_CTS_EN_Msk);
000002  2203              MOVS     r2,#3
000004  0312              LSLS     r2,r2,#12
000006  4391              BICS     r1,r1,r2
000008  6041              STR      r1,[r0,#4]
;;;93     }
00000a  4770              BX       lr
;;;94     
                          ENDP


                          AREA ||i.UART_DisableInt||, CODE, READONLY, ALIGN=2

                  UART_DisableInt PROC
;;;113     */
;;;114    void UART_DisableInt(UART_T*  uart, uint32_t u32InterruptFlag)
000000  6842              LDR      r2,[r0,#4]
;;;115    {
;;;116        /* Disable UART specified interrupt */
;;;117        UART_DISABLE_INT(uart, u32InterruptFlag);
000002  438a              BICS     r2,r2,r1
000004  6042              STR      r2,[r0,#4]
;;;118    
;;;119        /* Disable NVIC UART IRQ */
;;;120        if(uart == UART0)
000006  4b07              LDR      r3,|L5.36|
000008  2201              MOVS     r2,#1
00000a  0312              LSLS     r2,r2,#12
00000c  4906              LDR      r1,|L5.40|
00000e  4298              CMP      r0,r3
000010  d101              BNE      |L5.22|
                  |L5.18|
000012  600a              STR      r2,[r1,#0]            ;115
;;;121            NVIC_DisableIRQ(UART02_IRQn);
;;;122        else if(uart == UART1)
;;;123            NVIC_DisableIRQ(UART1_IRQn);
;;;124        else
;;;125            NVIC_DisableIRQ(UART02_IRQn);
;;;126    }
000014  4770              BX       lr
                  |L5.22|
000016  4b05              LDR      r3,|L5.44|
000018  4298              CMP      r0,r3                 ;122
00001a  d1fa              BNE      |L5.18|
00001c  2001              MOVS     r0,#1                 ;122
00001e  0340              LSLS     r0,r0,#13             ;122
000020  6008              STR      r0,[r1,#0]            ;122
000022  4770              BX       lr
;;;127    
                          ENDP

                  |L5.36|
                          DCD      0x40050000
                  |L5.40|
                          DCD      0xe000e180
                  |L5.44|
                          DCD      0x40150000

                          AREA ||i.UART_EnableFlowCtrl||, CODE, READONLY, ALIGN=1

                  UART_EnableFlowCtrl PROC
;;;137     */
;;;138    void UART_EnableFlowCtrl(UART_T* uart)
000000  6901              LDR      r1,[r0,#0x10]
;;;139    {
;;;140        /* Set RTS pin output is low level active */
;;;141        uart->MCR |= UART_MCR_LEV_RTS_Msk;
000002  2201              MOVS     r2,#1
000004  0252              LSLS     r2,r2,#9
000006  4311              ORRS     r1,r1,r2
000008  6101              STR      r1,[r0,#0x10]
;;;142    
;;;143        /* Set CTS pin input is low level active */
;;;144        uart->MSR |= UART_MSR_LEV_CTS_Msk;
00000a  6941              LDR      r1,[r0,#0x14]
00000c  1052              ASRS     r2,r2,#1
00000e  4311              ORRS     r1,r1,r2
000010  6141              STR      r1,[r0,#0x14]
;;;145    
;;;146        /* Set RTS and CTS auto flow control enable */
;;;147        uart->IER |= UART_IER_AUTO_RTS_EN_Msk | UART_IER_AUTO_CTS_EN_Msk;
000012  6841              LDR      r1,[r0,#4]
000014  2203              MOVS     r2,#3
000016  0312              LSLS     r2,r2,#12
000018  4311              ORRS     r1,r1,r2
00001a  6041              STR      r1,[r0,#4]
;;;148    }
00001c  4770              BX       lr
;;;149    
                          ENDP


                          AREA ||i.UART_EnableInt||, CODE, READONLY, ALIGN=2

                  UART_EnableInt PROC
;;;168     */
;;;169    void UART_EnableInt(UART_T*  uart, uint32_t u32InterruptFlag)
000000  6842              LDR      r2,[r0,#4]
;;;170    {
;;;171    
;;;172        /* Enable UART specified interrupt */
;;;173        UART_ENABLE_INT(uart, u32InterruptFlag);
000002  430a              ORRS     r2,r2,r1
000004  6042              STR      r2,[r0,#4]
;;;174    
;;;175        /* Enable NVIC UART IRQ */
;;;176        if(uart == UART0)
000006  4b07              LDR      r3,|L7.36|
000008  2201              MOVS     r2,#1
00000a  0312              LSLS     r2,r2,#12
00000c  4906              LDR      r1,|L7.40|
00000e  4298              CMP      r0,r3
000010  d101              BNE      |L7.22|
                  |L7.18|
000012  600a              STR      r2,[r1,#0]            ;170
;;;177            NVIC_EnableIRQ(UART02_IRQn);
;;;178        else if(uart == UART1)
;;;179            NVIC_EnableIRQ(UART1_IRQn);
;;;180        else
;;;181            NVIC_EnableIRQ(UART02_IRQn);
;;;182    
;;;183    }
000014  4770              BX       lr
                  |L7.22|
000016  4b05              LDR      r3,|L7.44|
000018  4298              CMP      r0,r3                 ;178
00001a  d1fa              BNE      |L7.18|
00001c  2001              MOVS     r0,#1                 ;178
00001e  0340              LSLS     r0,r0,#13             ;178
000020  6008              STR      r0,[r1,#0]            ;178
000022  4770              BX       lr
;;;184    
                          ENDP

                  |L7.36|
                          DCD      0x40050000
                  |L7.40|
                          DCD      0xe000e100
                  |L7.44|
                          DCD      0x40150000

                          AREA ||i.UART_Open||, CODE, READONLY, ALIGN=2

                  UART_Open PROC
;;;195     */
;;;196    void UART_Open(UART_T* uart, uint32_t u32baudrate)
000000  b5f0              PUSH     {r4-r7,lr}
;;;197    {
000002  4604              MOV      r4,r0
;;;198        uint8_t u8UartClkSrcSel, u8UartClkDivNum;
;;;199        uint32_t u32ClkTbl[4] = {__HXT, 0, 0, __HIRC};
000004  481c              LDR      r0,|L8.120|
000006  460d              MOV      r5,r1                 ;197
000008  c80f              LDM      r0,{r0-r3}
00000a  b085              SUB      sp,sp,#0x14           ;197
00000c  466e              MOV      r6,sp
00000e  c60f              STM      r6!,{r0-r3}
;;;200        uint32_t u32Baud_Div = 0;
;;;201    
;;;202        /* Get UART clock source selection */
;;;203        u8UartClkSrcSel = (CLK->CLKSEL1 & CLK_CLKSEL1_UART_S_Msk) >> CLK_CLKSEL1_UART_S_Pos;
000010  481a              LDR      r0,|L8.124|
000012  6941              LDR      r1,[r0,#0x14]
;;;204    
;;;205        /* Get UART clock divider number */
;;;206        u8UartClkDivNum = (CLK->CLKDIV & CLK_CLKDIV_UART_N_Msk) >> CLK_CLKDIV_UART_N_Pos;
000014  6980              LDR      r0,[r0,#0x18]
;;;207    
;;;208        /* Select UART function */
;;;209        uart->FUN_SEL = UART_FUNC_SEL_UART;
;;;210    
;;;211        /* Set UART line configuration */
;;;212        uart->LCR = UART_WORD_LEN_8 | UART_PARITY_NONE | UART_STOP_BIT_1;
;;;213    
;;;214        /* Set UART Rx and RTS trigger level */
;;;215        uart->FCR &= ~(UART_FCR_RFITL_Msk | UART_FCR_RTS_TRI_LEV_Msk);
;;;216    
;;;217        /* Get PLL clock frequency if UART clock source selection is PLL */
;;;218        if(u8UartClkSrcSel == 1)
;;;219            u32ClkTbl[u8UartClkSrcSel] = CLK_GetPLLClockFreq();
;;;220    
;;;221        /* Set UART baud rate */
;;;222        if(u32baudrate != 0)
;;;223        {
;;;224            u32Baud_Div = UART_BAUD_MODE2_DIVIDER((u32ClkTbl[u8UartClkSrcSel]) / (u8UartClkDivNum + 1), u32baudrate);
;;;225    
;;;226            if(u32Baud_Div > 0xFFFF)
;;;227                uart->BAUD = (UART_BAUD_MODE0 | UART_BAUD_MODE0_DIVIDER((u32ClkTbl[u8UartClkSrcSel]) / (u8UartClkDivNum + 1), u32baudrate));
;;;228            else
;;;229                uart->BAUD = (UART_BAUD_MODE2 | u32Baud_Div);
;;;230        }
;;;231    }
000016  018a              LSLS     r2,r1,#6
000018  2103              MOVS     r1,#3
00001a  0f96              LSRS     r6,r2,#30
00001c  0500              LSLS     r0,r0,#20
00001e  0f07              LSRS     r7,r0,#28
000020  2000              MOVS     r0,#0                 ;209
000022  6320              STR      r0,[r4,#0x30]         ;209
000024  60e1              STR      r1,[r4,#0xc]          ;212
000026  68a0              LDR      r0,[r4,#8]            ;215
000028  4915              LDR      r1,|L8.128|
00002a  4008              ANDS     r0,r0,r1              ;215
00002c  60a0              STR      r0,[r4,#8]            ;215
00002e  2e01              CMP      r6,#1                 ;218
000030  d102              BNE      |L8.56|
000032  f7fffffe          BL       CLK_GetPLLClockFreq
000036  9001              STR      r0,[sp,#4]            ;219
                  |L8.56|
000038  2d00              CMP      r5,#0                 ;222
00003a  d01b              BEQ      |L8.116|
00003c  00b1              LSLS     r1,r6,#2              ;224
00003e  4668              MOV      r0,sp                 ;224
000040  5840              LDR      r0,[r0,r1]            ;224
000042  1c79              ADDS     r1,r7,#1              ;224
000044  f7fffffe          BL       __aeabi_uidivmod
000048  4606              MOV      r6,r0                 ;224
00004a  0869              LSRS     r1,r5,#1              ;224
00004c  1840              ADDS     r0,r0,r1              ;224
00004e  4629              MOV      r1,r5                 ;224
000050  f7fffffe          BL       __aeabi_uidivmod
000054  490b              LDR      r1,|L8.132|
000056  1e80              SUBS     r0,r0,#2              ;226
000058  4288              CMP      r0,r1                 ;226
00005a  d907              BLS      |L8.108|
00005c  00e9              LSLS     r1,r5,#3              ;227
00005e  1870              ADDS     r0,r6,r1              ;227
000060  4629              MOV      r1,r5                 ;227
000062  f7fffffe          BL       __aeabi_uidivmod
000066  0900              LSRS     r0,r0,#4              ;227
000068  1e80              SUBS     r0,r0,#2              ;227
00006a  e002              B        |L8.114|
                  |L8.108|
00006c  2103              MOVS     r1,#3                 ;229
00006e  0709              LSLS     r1,r1,#28             ;229
000070  4308              ORRS     r0,r0,r1              ;229
                  |L8.114|
000072  6260              STR      r0,[r4,#0x24]         ;229
                  |L8.116|
000074  b005              ADD      sp,sp,#0x14
000076  bdf0              POP      {r4-r7,pc}
;;;232    
                          ENDP

                  |L8.120|
                          DCD      ||.constdata||
                  |L8.124|
                          DCD      0x50000200
                  |L8.128|
                          DCD      0xfff0ff0f
                  |L8.132|
                          DCD      0x0000ffff

                          AREA ||i.UART_Read||, CODE, READONLY, ALIGN=1

                  UART_Read PROC
;;;244     */
;;;245    uint32_t UART_Read(UART_T* uart, uint8_t *pu8RxBuf, uint32_t u32ReadBytes)
000000  b570              PUSH     {r4-r6,lr}
;;;246    {
000002  4604              MOV      r4,r0
;;;247        uint32_t  u32Count, u32delayno;
;;;248    
;;;249        for(u32Count = 0; u32Count < u32ReadBytes; u32Count++)
000004  2000              MOVS     r0,#0
;;;250        {
;;;251            u32delayno = 0;
;;;252    
;;;253            while(uart->FSR & UART_FSR_RX_EMPTY_Msk)   /* Check RX empty => failed */
;;;254            {
;;;255                u32delayno++;
;;;256                if(u32delayno >= 0x40000000)
000006  2501              MOVS     r5,#1
000008  07ad              LSLS     r5,r5,#30
00000a  e00c              B        |L9.38|
                  |L9.12|
00000c  2300              MOVS     r3,#0                 ;251
00000e  e004              B        |L9.26|
                  |L9.16|
000010  1c5b              ADDS     r3,r3,#1              ;253
000012  42ab              CMP      r3,r5
000014  d301              BCC      |L9.26|
;;;257                    return FALSE;
000016  2000              MOVS     r0,#0
;;;258            }
;;;259            pu8RxBuf[u32Count] = uart->RBR;    /* Get Data from UART RX  */
;;;260        }
;;;261    
;;;262        return u32Count;
;;;263    
;;;264    }
000018  bd70              POP      {r4-r6,pc}
                  |L9.26|
00001a  69a6              LDR      r6,[r4,#0x18]         ;253
00001c  0476              LSLS     r6,r6,#17             ;253
00001e  d4f7              BMI      |L9.16|
000020  6823              LDR      r3,[r4,#0]            ;259
000022  540b              STRB     r3,[r1,r0]            ;259
000024  1c40              ADDS     r0,r0,#1              ;259
                  |L9.38|
000026  4290              CMP      r0,r2                 ;249
000028  d3f0              BCC      |L9.12|
00002a  bd70              POP      {r4-r6,pc}
;;;265    
                          ENDP


                          AREA ||i.UART_SelectIrDAMode||, CODE, READONLY, ALIGN=2

                  UART_SelectIrDAMode PROC
;;;358     */
;;;359    void UART_SelectIrDAMode(UART_T* uart, uint32_t u32Buadrate, uint32_t u32Direction)
000000  b5f7              PUSH     {r0-r2,r4-r7,lr}
;;;360    {
000002  4604              MOV      r4,r0
;;;361        uint8_t u8UartClkSrcSel, u8UartClkDivNum;
;;;362        uint32_t u32ClkTbl[4] = {__HXT, 0, 0, __HIRC};
000004  481c              LDR      r0,|L10.120|
000006  b084              SUB      sp,sp,#0x10           ;360
000008  c80f              LDM      r0,{r0-r3}
;;;363        uint32_t u32Baud_Div;
;;;364    
;;;365        /* Select IrDA function mode */
;;;366        uart->FUN_SEL = UART_FUNC_SEL_IrDA;
00000a  466d              MOV      r5,sp
00000c  c50f              STM      r5!,{r0-r3}
00000e  2602              MOVS     r6,#2
000010  6326              STR      r6,[r4,#0x30]
;;;367    
;;;368        /* Get UART clock source selection */
;;;369        u8UartClkSrcSel = (CLK->CLKSEL1 & CLK_CLKSEL1_UART_S_Msk) >> CLK_CLKSEL1_UART_S_Pos;
000012  481a              LDR      r0,|L10.124|
000014  6941              LDR      r1,[r0,#0x14]
;;;370    
;;;371        /* Get UART clock divider number */
;;;372        u8UartClkDivNum = (CLK->CLKDIV & CLK_CLKDIV_UART_N_Msk) >> CLK_CLKDIV_UART_N_Pos;
000016  6980              LDR      r0,[r0,#0x18]
;;;373    
;;;374        /* Get PLL clock frequency if UART clock source selection is PLL */
;;;375        if(u8UartClkSrcSel == 1)
;;;376            u32ClkTbl[u8UartClkSrcSel] = CLK_GetPLLClockFreq();
;;;377    
;;;378        /* Set UART IrDA baud rate in mode 0 */
;;;379        if(u32Buadrate != 0)
;;;380        {
;;;381            u32Baud_Div = UART_BAUD_MODE0_DIVIDER((u32ClkTbl[u8UartClkSrcSel]) / (u8UartClkDivNum + 1), u32Buadrate);
;;;382    
;;;383            if(u32Baud_Div < 0xFFFF)
;;;384                uart->BAUD = (UART_BAUD_MODE0 | u32Baud_Div);
;;;385        }
;;;386    
;;;387        /* Configure IrDA relative settings */
;;;388        if(u32Direction == UART_IRCR_TX_SELECT)
;;;389        {
;;;390            uart->IRCR &= ~UART_IRCR_INV_TX_Msk;    //Tx signal is not inverse
;;;391            uart->IRCR |= UART_IRCR_TX_SELECT_Msk;
;;;392        }
;;;393        else
;;;394        {
;;;395            uart->IRCR |= UART_IRCR_INV_RX_Msk;     //Rx signal is inverse
;;;396            uart->IRCR &= ~UART_IRCR_TX_SELECT_Msk;
;;;397        }
;;;398    }
000018  0189              LSLS     r1,r1,#6
00001a  0f8d              LSRS     r5,r1,#30
00001c  0500              LSLS     r0,r0,#20
00001e  0f07              LSRS     r7,r0,#28
000020  2d01              CMP      r5,#1                 ;375
000022  d102              BNE      |L10.42|
000024  f7fffffe          BL       CLK_GetPLLClockFreq
000028  9001              STR      r0,[sp,#4]            ;376
                  |L10.42|
00002a  9805              LDR      r0,[sp,#0x14]         ;379
00002c  2800              CMP      r0,#0                 ;379
00002e  d011              BEQ      |L10.84|
000030  00a9              LSLS     r1,r5,#2              ;381
000032  4668              MOV      r0,sp                 ;381
000034  5840              LDR      r0,[r0,r1]            ;381
000036  1c79              ADDS     r1,r7,#1              ;381
000038  f7fffffe          BL       __aeabi_uidivmod
00003c  9905              LDR      r1,[sp,#0x14]         ;381
00003e  00c9              LSLS     r1,r1,#3              ;381
000040  1840              ADDS     r0,r0,r1              ;381
000042  9905              LDR      r1,[sp,#0x14]         ;381
000044  f7fffffe          BL       __aeabi_uidivmod
000048  0900              LSRS     r0,r0,#4              ;381
00004a  490d              LDR      r1,|L10.128|
00004c  1e80              SUBS     r0,r0,#2              ;383
00004e  4288              CMP      r0,r1                 ;383
000050  d200              BCS      |L10.84|
000052  6260              STR      r0,[r4,#0x24]         ;384
                  |L10.84|
000054  9806              LDR      r0,[sp,#0x18]         ;388
000056  2801              CMP      r0,#1                 ;388
000058  6aa0              LDR      r0,[r4,#0x28]         ;395
00005a  d007              BEQ      |L10.108|
00005c  2140              MOVS     r1,#0x40              ;395
00005e  4308              ORRS     r0,r0,r1              ;395
000060  62a0              STR      r0,[r4,#0x28]         ;395
000062  6aa0              LDR      r0,[r4,#0x28]         ;396
000064  43b0              BICS     r0,r0,r6              ;396
                  |L10.102|
000066  62a0              STR      r0,[r4,#0x28]         ;391
000068  b007              ADD      sp,sp,#0x1c
00006a  bdf0              POP      {r4-r7,pc}
                  |L10.108|
00006c  2120              MOVS     r1,#0x20              ;390
00006e  4388              BICS     r0,r0,r1              ;390
000070  62a0              STR      r0,[r4,#0x28]         ;390
000072  6aa0              LDR      r0,[r4,#0x28]         ;391
000074  4330              ORRS     r0,r0,r6              ;391
000076  e7f6              B        |L10.102|
;;;399    
                          ENDP

                  |L10.120|
                          DCD      ||.constdata||+0x20
                  |L10.124|
                          DCD      0x50000200
                  |L10.128|
                          DCD      0x0000ffff

                          AREA ||i.UART_SelectLINMode||, CODE, READONLY, ALIGN=1

                  UART_SelectLINMode PROC
;;;438     */
;;;439    void UART_SelectLINMode(UART_T* uart, uint32_t u32Mode, uint32_t u32BreakLength)
000000  b510              PUSH     {r4,lr}
;;;440    {
;;;441        /* Select LIN function mode */
;;;442        uart->FUN_SEL = UART_FUNC_SEL_LIN;
000002  2301              MOVS     r3,#1
000004  6303              STR      r3,[r0,#0x30]
;;;443    
;;;444        /* Select LIN function setting : Tx enable, Rx enable and break field length */
;;;445        uart->ALT_CSR &= ~(UART_ALT_CSR_LIN_TX_EN_Msk | UART_ALT_CSR_LIN_RX_EN_Msk | UART_ALT_CSR_UA_LIN_BKFL_Msk);
000006  6ac3              LDR      r3,[r0,#0x2c]
000008  24cf              MOVS     r4,#0xcf
00000a  43a3              BICS     r3,r3,r4
00000c  62c3              STR      r3,[r0,#0x2c]
;;;446        uart->ALT_CSR |= (u32Mode | (u32BreakLength << UART_ALT_CSR_UA_LIN_BKFL_Pos));
00000e  6ac3              LDR      r3,[r0,#0x2c]
000010  4311              ORRS     r1,r1,r2
000012  430b              ORRS     r3,r3,r1
000014  62c3              STR      r3,[r0,#0x2c]
;;;447    }
000016  bd10              POP      {r4,pc}
;;;448    
                          ENDP


                          AREA ||i.UART_SelectRS485Mode||, CODE, READONLY, ALIGN=2

                  UART_SelectRS485Mode PROC
;;;414     */
;;;415    void UART_SelectRS485Mode(UART_T* uart, uint32_t u32Mode, uint32_t u32Addr)
000000  b510              PUSH     {r4,lr}
;;;416    {
;;;417        /* Select UART RS485 function mode */
;;;418        uart->FUN_SEL = UART_FUNC_SEL_RS485;
000002  2303              MOVS     r3,#3
000004  6303              STR      r3,[r0,#0x30]
;;;419    
;;;420        /* Set RS585 configuration */
;;;421        uart->ALT_CSR &= ~(UART_ALT_CSR_RS485_NMM_Msk | UART_ALT_CSR_RS485_AUD_Msk | UART_ALT_CSR_RS485_AAD_Msk | UART_ALT_CSR_ADDR_MATCH_Msk);
000006  6ac3              LDR      r3,[r0,#0x2c]
000008  4c04              LDR      r4,|L12.28|
00000a  4023              ANDS     r3,r3,r4
00000c  62c3              STR      r3,[r0,#0x2c]
;;;422        uart->ALT_CSR |= (u32Mode | (u32Addr << UART_ALT_CSR_ADDR_MATCH_Pos));
00000e  6ac3              LDR      r3,[r0,#0x2c]
000010  0612              LSLS     r2,r2,#24
000012  430a              ORRS     r2,r2,r1
000014  4313              ORRS     r3,r3,r2
000016  62c3              STR      r3,[r0,#0x2c]
;;;423    }
000018  bd10              POP      {r4,pc}
;;;424    
                          ENDP

00001a  0000              DCW      0x0000
                  |L12.28|
                          DCD      0x00fff8ff

                          AREA ||i.UART_SetLine_Config||, CODE, READONLY, ALIGN=2

                  UART_SetLine_Config PROC
;;;293     */
;;;294    void UART_SetLine_Config(UART_T* uart, uint32_t u32baudrate, uint32_t u32data_width, uint32_t u32parity, uint32_t  u32stop_bits)
000000  b5ff              PUSH     {r0-r7,lr}
;;;295    {
000002  4605              MOV      r5,r0
;;;296        uint8_t u8UartClkSrcSel, u8UartClkDivNum;
;;;297        uint32_t u32ClkTbl[4] = {__HXT, 0, 0, __HIRC};
000004  481b              LDR      r0,|L13.116|
000006  460c              MOV      r4,r1                 ;295
000008  c80f              LDM      r0,{r0-r3}
00000a  b085              SUB      sp,sp,#0x14           ;295
00000c  466e              MOV      r6,sp
00000e  c60f              STM      r6!,{r0-r3}
;;;298        uint32_t u32Baud_Div = 0;
;;;299    
;;;300        /* Get UART clock source selection */
;;;301        u8UartClkSrcSel = (CLK->CLKSEL1 & CLK_CLKSEL1_UART_S_Msk) >> CLK_CLKSEL1_UART_S_Pos;
000010  4819              LDR      r0,|L13.120|
000012  6941              LDR      r1,[r0,#0x14]
;;;302    
;;;303        /* Get UART clock divider number */
;;;304        u8UartClkDivNum = (CLK->CLKDIV & CLK_CLKDIV_UART_N_Msk) >> CLK_CLKDIV_UART_N_Pos;
000014  6980              LDR      r0,[r0,#0x18]
;;;305    
;;;306        /* Get PLL clock frequency if UART clock source selection is PLL */
;;;307        if(u8UartClkSrcSel == 1)
;;;308            u32ClkTbl[u8UartClkSrcSel] = CLK_GetPLLClockFreq();
;;;309    
;;;310        /* Set UART baud rate */
;;;311        if(u32baudrate != 0)
;;;312        {
;;;313            u32Baud_Div = UART_BAUD_MODE2_DIVIDER((u32ClkTbl[u8UartClkSrcSel]) / (u8UartClkDivNum + 1), u32baudrate);
;;;314    
;;;315            if(u32Baud_Div > 0xFFFF)
;;;316                uart->BAUD = (UART_BAUD_MODE0 | UART_BAUD_MODE0_DIVIDER((u32ClkTbl[u8UartClkSrcSel]) / (u8UartClkDivNum + 1), u32baudrate));
;;;317            else
;;;318                uart->BAUD = (UART_BAUD_MODE2 | u32Baud_Div);
;;;319        }
;;;320    
;;;321        /* Set UART line configuration */
;;;322        uart->LCR = u32data_width | u32parity | u32stop_bits;
;;;323    }
000016  0189              LSLS     r1,r1,#6
000018  0f8e              LSRS     r6,r1,#30
00001a  0500              LSLS     r0,r0,#20
00001c  0f07              LSRS     r7,r0,#28
00001e  2e01              CMP      r6,#1                 ;307
000020  d102              BNE      |L13.40|
000022  f7fffffe          BL       CLK_GetPLLClockFreq
000026  9001              STR      r0,[sp,#4]            ;308
                  |L13.40|
000028  2c00              CMP      r4,#0                 ;311
00002a  d01b              BEQ      |L13.100|
00002c  00b1              LSLS     r1,r6,#2              ;313
00002e  4668              MOV      r0,sp                 ;313
000030  5840              LDR      r0,[r0,r1]            ;313
000032  1c79              ADDS     r1,r7,#1              ;313
000034  f7fffffe          BL       __aeabi_uidivmod
000038  4606              MOV      r6,r0                 ;313
00003a  0861              LSRS     r1,r4,#1              ;313
00003c  1840              ADDS     r0,r0,r1              ;313
00003e  4621              MOV      r1,r4                 ;313
000040  f7fffffe          BL       __aeabi_uidivmod
000044  490d              LDR      r1,|L13.124|
000046  1e80              SUBS     r0,r0,#2              ;315
000048  4288              CMP      r0,r1                 ;315
00004a  d907              BLS      |L13.92|
00004c  00e1              LSLS     r1,r4,#3              ;316
00004e  1870              ADDS     r0,r6,r1              ;316
000050  4621              MOV      r1,r4                 ;316
000052  f7fffffe          BL       __aeabi_uidivmod
000056  0900              LSRS     r0,r0,#4              ;316
000058  1e80              SUBS     r0,r0,#2              ;316
00005a  e002              B        |L13.98|
                  |L13.92|
00005c  2103              MOVS     r1,#3                 ;318
00005e  0709              LSLS     r1,r1,#28             ;318
000060  4308              ORRS     r0,r0,r1              ;318
                  |L13.98|
000062  6268              STR      r0,[r5,#0x24]         ;316
                  |L13.100|
000064  9908              LDR      r1,[sp,#0x20]         ;322
000066  9807              LDR      r0,[sp,#0x1c]         ;322
000068  4308              ORRS     r0,r0,r1              ;322
00006a  990e              LDR      r1,[sp,#0x38]         ;322
00006c  4308              ORRS     r0,r0,r1              ;322
00006e  60e8              STR      r0,[r5,#0xc]          ;322
000070  b009              ADD      sp,sp,#0x24
000072  bdf0              POP      {r4-r7,pc}
;;;324    
                          ENDP

                  |L13.116|
                          DCD      ||.constdata||+0x10
                  |L13.120|
                          DCD      0x50000200
                  |L13.124|
                          DCD      0x0000ffff

                          AREA ||i.UART_SetTimeoutCnt||, CODE, READONLY, ALIGN=1

                  UART_SetTimeoutCnt PROC
;;;335     */
;;;336    void UART_SetTimeoutCnt(UART_T* uart, uint32_t u32TOC)
000000  6a02              LDR      r2,[r0,#0x20]
;;;337    {
;;;338        /* Set time-out interrupt comparator */
;;;339        uart->TOR = (uart->TOR & ~UART_TOR_TOIC_Msk) | (u32TOC);
000002  0a12              LSRS     r2,r2,#8
000004  0212              LSLS     r2,r2,#8
000006  430a              ORRS     r2,r2,r1
000008  6202              STR      r2,[r0,#0x20]
;;;340    
;;;341        /* Set time-out counter enable */
;;;342        uart->IER |= UART_IER_TIME_OUT_EN_Msk;
00000a  6841              LDR      r1,[r0,#4]
00000c  2201              MOVS     r2,#1
00000e  02d2              LSLS     r2,r2,#11
000010  4311              ORRS     r1,r1,r2
000012  6041              STR      r1,[r0,#4]
;;;343    }
000014  4770              BX       lr
;;;344    
                          ENDP


                          AREA ||i.UART_Write||, CODE, READONLY, ALIGN=1

                  UART_Write PROC
;;;460     */
;;;461    uint32_t UART_Write(UART_T* uart, uint8_t *pu8TxBuf, uint32_t u32WriteBytes)
000000  b570              PUSH     {r4-r6,lr}
;;;462    {
000002  4604              MOV      r4,r0
;;;463        uint32_t  u32Count, u32delayno;
;;;464    
;;;465        for(u32Count = 0; u32Count != u32WriteBytes; u32Count++)
000004  2000              MOVS     r0,#0
;;;466        {
;;;467            u32delayno = 0;
;;;468            while((uart->FSR & UART_FSR_TE_FLAG_Msk) == 0)   /* Wait Tx empty and Time-out manner */
;;;469            {
;;;470                u32delayno++;
;;;471                if(u32delayno >= 0x40000000)
000006  2501              MOVS     r5,#1
000008  07ad              LSLS     r5,r5,#30
00000a  e00c              B        |L15.38|
                  |L15.12|
00000c  2300              MOVS     r3,#0                 ;467
00000e  e004              B        |L15.26|
                  |L15.16|
000010  1c5b              ADDS     r3,r3,#1              ;468
000012  42ab              CMP      r3,r5
000014  d301              BCC      |L15.26|
;;;472                    return FALSE;
000016  2000              MOVS     r0,#0
;;;473            }
;;;474            uart->THR = pu8TxBuf[u32Count];    /* Send UART Data from buffer */
;;;475        }
;;;476    
;;;477        return u32Count;
;;;478    
;;;479    }
000018  bd70              POP      {r4-r6,pc}
                  |L15.26|
00001a  69a6              LDR      r6,[r4,#0x18]         ;468
00001c  00f6              LSLS     r6,r6,#3              ;468
00001e  d5f7              BPL      |L15.16|
000020  5c0b              LDRB     r3,[r1,r0]            ;474
000022  6023              STR      r3,[r4,#0]            ;474
000024  1c40              ADDS     r0,r0,#1              ;474
                  |L15.38|
000026  4290              CMP      r0,r2                 ;465
000028  d1f0              BNE      |L15.12|
00002a  bd70              POP      {r4-r6,pc}
;;;480    
                          ENDP


                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                          DCD      0x00b71b00
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x01518000
                          DCD      0x00b71b00
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x01518000
                          DCD      0x00b71b00
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x01518000

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\Library\\StdDriver\\src\\uart.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___6_uart_c_f12f5b44____REV16|
#line 118 "..\\..\\..\\Library\\CMSIS\\Include\\core_cmInstr.h"
|__asm___6_uart_c_f12f5b44____REV16| PROC
#line 119

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___6_uart_c_f12f5b44____REVSH|
#line 132
|__asm___6_uart_c_f12f5b44____REVSH| PROC
#line 133

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
